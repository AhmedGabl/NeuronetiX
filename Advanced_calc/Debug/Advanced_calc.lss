
Advanced_calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00003c84  00003d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800204  00800204  00003ebc  2**0
                  ALLOC
  3 .stab         0000381c  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000234f  00000000  00000000  000076d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00009a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  00009c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  00009e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0000c987  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  0000e109  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000f5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  0000f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  0000faf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_4>
      14:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_10>
      2c:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <main>
      8a:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	e8 57       	subi	r30, 0x78	; 120
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <TMR2_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR2_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <TMR2_voidSetDelay_ms_usingCTC+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms*2;

#elif TMR2_PRESCALER == TMR2_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
     fb8:	e3 e4       	ldi	r30, 0x43	; 67
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	89 ef       	ldi	r24, 0xF9	; 249
     fbe:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	cc 01       	movw	r24, r24
     fc6:	a0 e0       	ldi	r26, 0x00	; 0
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	80 93 0e 02 	sts	0x020E, r24
     fce:	90 93 0f 02 	sts	0x020F, r25
     fd2:	a0 93 10 02 	sts	0x0210, r26
     fd6:	b0 93 11 02 	sts	0x0211, r27
	// Under the condition that the tick time is 4 microseconds, set OCR2 to 249
	OCR2 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <TMR2_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR2_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
#if TMR2_MODE == TMR2_FAST_PWM_MODE

	if ((100 >= copy_u8DutyCycle)) {
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	85 36       	cpi	r24, 0x65	; 101
     ff4:	e0 f4       	brcc	.+56     	; 0x102e <TMR2_voidSetDutyCycleForPWM+0x4a>
		OCR2 = 0;
		else
		OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;

#elif TMR2_PWM_MODE == TMR2_INVERTING
		copy_u8DutyCycle = 100 - copy_u8DutyCycle;
     ff6:	94 e6       	ldi	r25, 0x64	; 100
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	29 2f       	mov	r18, r25
     ffc:	28 1b       	sub	r18, r24
     ffe:	82 2f       	mov	r24, r18
    1000:	89 83       	std	Y+1, r24	; 0x01
		if (copy_u8DutyCycle == 0)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	88 23       	and	r24, r24
    1006:	21 f4       	brne	.+8      	; 0x1010 <TMR2_voidSetDutyCycleForPWM+0x2c>
			OCR2 = 0;
    1008:	e3 e4       	ldi	r30, 0x43	; 67
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	10 82       	st	Z, r1
    100e:	0f c0       	rjmp	.+30     	; 0x102e <TMR2_voidSetDutyCycleForPWM+0x4a>
		else
			OCR2 = (((u16) copy_u8DutyCycle * 256) / 100) - 1;
    1010:	e3 e4       	ldi	r30, 0x43	; 67
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 2f       	mov	r25, r24
    101c:	88 27       	eor	r24, r24
    101e:	24 e6       	ldi	r18, 0x64	; 100
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodhi4>
    1028:	cb 01       	movw	r24, r22
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
		OCR2 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <TMR2_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR2_voidInit(void) {
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	// Enable overflow interrupt
	SET_BIT(TIMSK, TOIE2);

#elif TMR2_MODE == TMR2_FAST_PWM_MODE
	// Select Fast PWM mode
	SET_BIT(TCCR2, WGM20);
    103e:	a5 e4       	ldi	r26, 0x45	; 69
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e4       	ldi	r30, 0x45	; 69
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 64       	ori	r24, 0x40	; 64
    104a:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    104c:	a5 e4       	ldi	r26, 0x45	; 69
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e4       	ldi	r30, 0x45	; 69
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 60       	ori	r24, 0x08	; 8
    1058:	8c 93       	st	X, r24

#if TMR2_PWM_MODE == TMR2_INVERTING
	SET_BIT(TCCR2, COM20);
    105a:	a5 e4       	ldi	r26, 0x45	; 69
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e4       	ldi	r30, 0x45	; 69
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    1068:	a5 e4       	ldi	r26, 0x45	; 69
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e4       	ldi	r30, 0x45	; 69
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 62       	ori	r24, 0x20	; 32
    1074:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
	SET_BIT(TCCR2, COM21);
#endif

#endif
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <TMR2_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR2_voidStart(void) {
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, CS21);
	CLR_BIT(TCCR2, CS22);

#elif TMR2_PRESCALER == TMR2_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR2, CS20);
    1084:	a5 e4       	ldi	r26, 0x45	; 69
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e5 e4       	ldi	r30, 0x45	; 69
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	8c 93       	st	X, r24
	SET_BIT(TCCR2, CS21);
    1092:	a5 e4       	ldi	r26, 0x45	; 69
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e5 e4       	ldi	r30, 0x45	; 69
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    10a0:	a5 e4       	ldi	r26, 0x45	; 69
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e4       	ldi	r30, 0x45	; 69
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8b 7f       	andi	r24, 0xFB	; 251
    10ac:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR2, CS20);
	CLR_BIT(TCCR2, CS21);
	SET_BIT(TCCR2, CS22);
#endif
}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <TMR2_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR2_voidStop(void) {
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2, CS20);
    10bc:	a5 e4       	ldi	r26, 0x45	; 69
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e4       	ldi	r30, 0x45	; 69
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8e 7f       	andi	r24, 0xFE	; 254
    10c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    10ca:	a5 e4       	ldi	r26, 0x45	; 69
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8d 7f       	andi	r24, 0xFD	; 253
    10d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    10d8:	a5 e4       	ldi	r26, 0x45	; 69
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e4       	ldi	r30, 0x45	; 69
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8b 7f       	andi	r24, 0xFB	; 251
    10e4:	8c 93       	st	X, r24
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TMR2_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR2_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <TMR2_voidSetCallBackOVF+0x6>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	31 f0       	breq	.+12     	; 0x110e <TMR2_voidSetCallBackOVF+0x22>
		TMR2_privatePtrToCAllBackOVF = ptrToFunc;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	90 93 05 02 	sts	0x0205, r25
    110a:	80 93 04 02 	sts	0x0204, r24
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <TMR2_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR2_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <TMR2_voidSetCallBackCTC+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	31 f0       	breq	.+12     	; 0x113a <TMR2_voidSetCallBackCTC+0x22>
		TMR2_privatePtrToCAllBackCTC = ptrToFunc;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	90 93 07 02 	sts	0x0207, r25
    1136:	80 93 06 02 	sts	0x0206, r24
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <__vector_5>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    116e:	80 91 08 02 	lds	r24, 0x0208
    1172:	90 91 09 02 	lds	r25, 0x0209
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	90 93 09 02 	sts	0x0209, r25
    117c:	80 93 08 02 	sts	0x0208, r24

	if (TMR2_ovCount == local_u16ovCounter) {
    1180:	80 91 08 02 	lds	r24, 0x0208
    1184:	90 91 09 02 	lds	r25, 0x0209
    1188:	23 e0       	ldi	r18, 0x03	; 3
    118a:	81 3d       	cpi	r24, 0xD1	; 209
    118c:	92 07       	cpc	r25, r18
    118e:	99 f4       	brne	.+38     	; 0x11b6 <__vector_5+0x72>
		// Reload preload value
		TCNT2 = TMR2_PRELOAD_VALUE;
    1190:	e4 e4       	ldi	r30, 0x44	; 68
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	81 e7       	ldi	r24, 0x71	; 113
    1196:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    1198:	10 92 09 02 	sts	0x0209, r1
    119c:	10 92 08 02 	sts	0x0208, r1

		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackOVF != NULL) {
    11a0:	80 91 04 02 	lds	r24, 0x0204
    11a4:	90 91 05 02 	lds	r25, 0x0205
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <__vector_5+0x72>
			TMR2_privatePtrToCAllBackOVF();
    11ac:	e0 91 04 02 	lds	r30, 0x0204
    11b0:	f0 91 05 02 	lds	r31, 0x0205
    11b4:	09 95       	icall
		}
	}
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__vector_4>:

// ISR for timer0 output compare match
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1206:	80 91 0a 02 	lds	r24, 0x020A
    120a:	90 91 0b 02 	lds	r25, 0x020B
    120e:	a0 91 0c 02 	lds	r26, 0x020C
    1212:	b0 91 0d 02 	lds	r27, 0x020D
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	a1 1d       	adc	r26, r1
    121a:	b1 1d       	adc	r27, r1
    121c:	80 93 0a 02 	sts	0x020A, r24
    1220:	90 93 0b 02 	sts	0x020B, r25
    1224:	a0 93 0c 02 	sts	0x020C, r26
    1228:	b0 93 0d 02 	sts	0x020D, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    122c:	20 91 0e 02 	lds	r18, 0x020E
    1230:	30 91 0f 02 	lds	r19, 0x020F
    1234:	40 91 10 02 	lds	r20, 0x0210
    1238:	50 91 11 02 	lds	r21, 0x0211
    123c:	80 91 0a 02 	lds	r24, 0x020A
    1240:	90 91 0b 02 	lds	r25, 0x020B
    1244:	a0 91 0c 02 	lds	r26, 0x020C
    1248:	b0 91 0d 02 	lds	r27, 0x020D
    124c:	28 17       	cp	r18, r24
    124e:	39 07       	cpc	r19, r25
    1250:	4a 07       	cpc	r20, r26
    1252:	5b 07       	cpc	r21, r27
    1254:	99 f4       	brne	.+38     	; 0x127c <__vector_4+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1256:	10 92 0a 02 	sts	0x020A, r1
    125a:	10 92 0b 02 	sts	0x020B, r1
    125e:	10 92 0c 02 	sts	0x020C, r1
    1262:	10 92 0d 02 	sts	0x020D, r1
		// Call the callback function if assigned
		if (TMR2_privatePtrToCAllBackCTC != NULL) {
    1266:	80 91 06 02 	lds	r24, 0x0206
    126a:	90 91 07 02 	lds	r25, 0x0207
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	29 f0       	breq	.+10     	; 0x127c <__vector_4+0xa0>
			TMR2_privatePtrToCAllBackCTC();
    1272:	e0 91 06 02 	lds	r30, 0x0206
    1276:	f0 91 07 02 	lds	r31, 0x0207
    127a:	09 95       	icall
		}
	}
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <TMR2_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR2) for CTC mode
void TMR2_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = copy_u8CompareValue;
    12ae:	e3 e4       	ldi	r30, 0x43	; 67
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	80 83       	st	Z, r24
}
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <TMR1_voidSetFrequencyMode14FastPWM>:
 */

#include "../includes/TMR1_interface.h"


void TMR1_voidSetFrequencyMode14FastPWM(u16 copy_u16Frequency_hz) {
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <TMR1_voidSetFrequencyMode14FastPWM+0xa>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
//under condition tick time 4microsec  prescaler64//////////////////////////////////////////////
	#if TMR1_PRESCALER == TMR1_PRESCALER_64
	ICR1 = ((1000000UL / copy_u16Frequency_hz) / 4) - 1;
    12d0:	06 e4       	ldi	r16, 0x46	; 70
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	9c 01       	movw	r18, r24
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	80 e9       	ldi	r24, 0x90	; 144
    12e0:	90 ed       	ldi	r25, 0xD0	; 208
    12e2:	a3 e0       	ldi	r26, 0x03	; 3
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__udivmodsi4>
    12ee:	da 01       	movw	r26, r20
    12f0:	c9 01       	movw	r24, r18
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f8 01       	movw	r30, r16
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
	#endif// TMR1_PRESCALER

}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <TMR1_voidSetDutyCycleMode14FastPWM>:

void TMR1_voidSetDutyCycleMode14FastPWM(F32 copy_f32DutyCycle) {
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <TMR1_voidSetDutyCycleMode14FastPWM+0xa>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <TMR1_voidSetDutyCycleMode14FastPWM+0xc>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	69 83       	std	Y+1, r22	; 0x01
    131a:	7a 83       	std	Y+2, r23	; 0x02
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	9c 83       	std	Y+4, r25	; 0x04
	if (copy_f32DutyCycle <= 100) {
    1320:	69 81       	ldd	r22, Y+1	; 0x01
    1322:	7a 81       	ldd	r23, Y+2	; 0x02
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	48 ec       	ldi	r20, 0xC8	; 200
    132e:	52 e4       	ldi	r21, 0x42	; 66
    1330:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    1334:	18 16       	cp	r1, r24
    1336:	0c f4       	brge	.+2      	; 0x133a <TMR1_voidSetDutyCycleMode14FastPWM+0x32>
    1338:	48 c0       	rjmp	.+144    	; 0x13ca <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
#if TMR1_PWM_MODE == TMR1_NONINVERTING
		if (copy_f32DutyCycle == 0) {
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    134e:	88 23       	and	r24, r24
    1350:	29 f4       	brne	.+10     	; 0x135c <TMR1_voidSetDutyCycleMode14FastPWM+0x54>
			OCR1A = 0;
    1352:	ea e4       	ldi	r30, 0x4A	; 74
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	11 82       	std	Z+1, r1	; 0x01
    1358:	10 82       	st	Z, r1
    135a:	37 c0       	rjmp	.+110    	; 0x13ca <TMR1_voidSetDutyCycleMode14FastPWM+0xc2>
		} else {
			OCR1A = ((copy_f32DutyCycle * (ICR1 + 1)) / 100) - 1;
    135c:	0a e4       	ldi	r16, 0x4A	; 74
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	e6 e4       	ldi	r30, 0x46	; 70
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	cc 01       	movw	r24, r24
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	29 81       	ldd	r18, Y+1	; 0x01
    1382:	3a 81       	ldd	r19, Y+2	; 0x02
    1384:	4b 81       	ldd	r20, Y+3	; 0x03
    1386:	5c 81       	ldd	r21, Y+4	; 0x04
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	48 ec       	ldi	r20, 0xC8	; 200
    139a:	52 e4       	ldi	r21, 0x42	; 66
    139c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
			copy_f32DutyCycle = 100 - copy_u8_duty;
			OCR1A = (((float)copy_f32DutyCycle * (ICR1+1)) / 100) -1;
		}
#endif	//TMR1_FastPWM_14_MODE
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <TMR1_voidInit>:


void TMR1_voidInit(void) {
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_FAST_PWM_MODE_14
	//select mode fast_PWM_MODE_14
	CLR_BIT(TCCR1A, WGM10);
    13e4:	af e4       	ldi	r26, 0x4F	; 79
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ef e4       	ldi	r30, 0x4F	; 79
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    13f2:	af e4       	ldi	r26, 0x4F	; 79
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef e4       	ldi	r30, 0x4F	; 79
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1400:	ae e4       	ldi	r26, 0x4E	; 78
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ee e4       	ldi	r30, 0x4E	; 78
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	88 60       	ori	r24, 0x08	; 8
    140c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    140e:	ae e4       	ldi	r26, 0x4E	; 78
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ee e4       	ldi	r30, 0x4E	; 78
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 61       	ori	r24, 0x10	; 16
    141a:	8c 93       	st	X, r24
#if TMR1_PWM_MODE == TMR1_NONINVERTING
	CLR_BIT(TCCR1A, COM1A0);
    141c:	af e4       	ldi	r26, 0x4F	; 79
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ef e4       	ldi	r30, 0x4F	; 79
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    142a:	af e4       	ldi	r26, 0x4F	; 79
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ef e4       	ldi	r30, 0x4F	; 79
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	8c 93       	st	X, r24
#elif TMR1_PWM_MODE == TMR1_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
	TMR1_voidSetFrequencyMode14FastPWM(50);
    1438:	82 e3       	ldi	r24, 0x32	; 50
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 5f 09 	call	0x12be	; 0x12be <TMR1_voidSetFrequencyMode14FastPWM>

#endif
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <TMR1_voidSetCompareMatchValueA>:

void TMR1_voidSetCompareMatchValueA(u16 copy_u8CompareMatchValueA) {
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <TMR1_voidSetCompareMatchValueA+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = copy_u8CompareMatchValueA;
    1454:	ea e4       	ldi	r30, 0x4A	; 74
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <TMR1_voidStart>:

/**
 * @brief Start Timer/Counter 1.
 */
void TMR1_voidStart(void) {
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, CS11);
	CLR_BIT(TCCR1B, CS12);

#elif TMR1_PRESCALER == TMR1_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR1B, CS10);
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    1480:	ae e4       	ldi	r26, 0x4E	; 78
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ee e4       	ldi	r30, 0x4E	; 78
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	82 60       	ori	r24, 0x02	; 2
    148c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    148e:	ae e4       	ldi	r26, 0x4E	; 78
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8b 7f       	andi	r24, 0xFB	; 251
    149a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
	CLR_BIT(TCCR1B, CS11);
	SET_BIT(TCCR1B, CS12);
#endif

}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TMR1_voidStop>:
/**
 * @brief Stop Timer/Counter 1.
 */
void TMR1_voidStop(void) {
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, CS10);
    14aa:	ae e4       	ldi	r26, 0x4E	; 78
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ee e4       	ldi	r30, 0x4E	; 78
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    14b8:	ae e4       	ldi	r26, 0x4E	; 78
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e4       	ldi	r30, 0x4E	; 78
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8b 7f       	andi	r24, 0xFB	; 251
    14d2:	8c 93       	st	X, r24
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TMR0_voidSetDelay_ms_usingCTC>:

// Counter for tracking CTC events
volatile static u32 private_ctcCounter;

// Function to set a delay using CTC mode
void TMR0_voidSetDelay_ms_usingCTC(u16 copy_u16Delay_ms) {
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <TMR0_voidSetDelay_ms_usingCTC+0x6>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
	private_ctcCounter = copy_u16Delay_ms * 8;

#elif TMR0_PRESCALER == TMR0_PRESCALER_64

	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
    14e8:	ec e5       	ldi	r30, 0x5C	; 92
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	89 ef       	ldi	r24, 0xF9	; 249
    14ee:	80 83       	st	Z, r24
	private_ctcCounter = copy_u16Delay_ms;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	cc 01       	movw	r24, r24
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	80 93 1c 02 	sts	0x021C, r24
    14fe:	90 93 1d 02 	sts	0x021D, r25
    1502:	a0 93 1e 02 	sts	0x021E, r26
    1506:	b0 93 1f 02 	sts	0x021F, r27
	// Under the condition that the tick time is 4 microseconds, set OCR0 to 249
	OCR0 = 249;
	private_ctcCounter = copy_u16Delay_ms / 16;

#endif
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TMR0_voidSetDutyCycleForPWM>:

// Function to set the PWM duty cycle for Fast PWM and Phase Correct PWM
void TMR0_voidSetDutyCycleForPWM(u8 copy_u8DutyCycle) {
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
#endif
	}

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT

	if ((100 >= copy_u8DutyCycle)) {
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	85 36       	cpi	r24, 0x65	; 101
    1524:	d0 f4       	brcc	.+52     	; 0x155a <TMR0_voidSetDutyCycleForPWM+0x46>

#if TMR0_PWM_MODE == TMR0_NONINVERTING
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
    1526:	ec e5       	ldi	r30, 0x5C	; 92
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	48 2f       	mov	r20, r24
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	ca 01       	movw	r24, r20
    1532:	9c 01       	movw	r18, r24
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	c9 01       	movw	r24, r18
    153a:	96 95       	lsr	r25
    153c:	98 2f       	mov	r25, r24
    153e:	88 27       	eor	r24, r24
    1540:	97 95       	ror	r25
    1542:	87 95       	ror	r24
    1544:	82 1b       	sub	r24, r18
    1546:	93 0b       	sbc	r25, r19
    1548:	84 0f       	add	r24, r20
    154a:	95 1f       	adc	r25, r21
    154c:	24 e6       	ldi	r18, 0x64	; 100
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	b9 01       	movw	r22, r18
    1552:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__udivmodhi4>
    1556:	cb 01       	movw	r24, r22
    1558:	80 83       	st	Z, r24
		OCR0 = (((u16) copy_u8DutyCycle * 255) / 100);
#endif
	}

#endif
}
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <TMR0_voidInit>:

// Function to initialize Timer0 based on the selected mode
void TMR0_voidInit(void) {
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, COM01);
#endif

#elif TMR0_MODE == TMR0_PWM_PHASE_CORRECT
	// Select Phase Correct PWM mode
	SET_BIT(TCCR0, WGM00);
    156a:	a3 e5       	ldi	r26, 0x53	; 83
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e3 e5       	ldi	r30, 0x53	; 83
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 64       	ori	r24, 0x40	; 64
    1576:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    1578:	a3 e5       	ldi	r26, 0x53	; 83
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	8c 93       	st	X, r24
#if TMR0_PWM_MODE == TMR0_INVERTING
	SET_BIT(TCCR0, COM00);
	SET_BIT(TCCR0, COM01);

#elif TMR0_PWM_MODE == TMR0_NONINVERTING
	CLR_BIT(TCCR0, COM00);
    1586:	a3 e5       	ldi	r26, 0x53	; 83
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e3 e5       	ldi	r30, 0x53	; 83
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 7e       	andi	r24, 0xEF	; 239
    1592:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1594:	a3 e5       	ldi	r26, 0x53	; 83
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e3 e5       	ldi	r30, 0x53	; 83
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 62       	ori	r24, 0x20	; 32
    15a0:	8c 93       	st	X, r24
#endif

#endif
}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <TMR0_voidStart>:

// Function to start Timer0 with the selected prescaler
void TMR0_voidStart(void) {
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	// Select prescaler value = 64
	SET_BIT(TCCR0, CS00);
    15b0:	a3 e5       	ldi	r26, 0x53	; 83
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e3 e5       	ldi	r30, 0x53	; 83
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    15be:	a3 e5       	ldi	r26, 0x53	; 83
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e3 e5       	ldi	r30, 0x53	; 83
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	82 60       	ori	r24, 0x02	; 2
    15ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    15cc:	a3 e5       	ldi	r26, 0x53	; 83
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e3 e5       	ldi	r30, 0x53	; 83
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8b 7f       	andi	r24, 0xFB	; 251
    15d8:	8c 93       	st	X, r24
	// Select prescaler value = 1024
	SET_BIT(TCCR0, CS00);
	CLR_BIT(TCCR0, CS01);
	SET_BIT(TCCR0, CS02);
#endif
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <TMR0_voidStop>:

// Function to stop Timer0 by turning off all prescaler bits
void TMR0_voidStop(void) {
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, CS00);
    15e8:	a3 e5       	ldi	r26, 0x53	; 83
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e3 e5       	ldi	r30, 0x53	; 83
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    15f6:	a3 e5       	ldi	r26, 0x53	; 83
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8d 7f       	andi	r24, 0xFD	; 253
    1602:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1604:	a3 e5       	ldi	r26, 0x53	; 83
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e3 e5       	ldi	r30, 0x53	; 83
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8b 7f       	andi	r24, 0xFB	; 251
    1610:	8c 93       	st	X, r24
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <TMR0_voidSetCallBackOVF>:

// Function to set the callback function for timer0 overflow
void TMR0_voidSetCallBackOVF(void (*ptrToFunc)(void)) {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <TMR0_voidSetCallBackOVF+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	31 f0       	breq	.+12     	; 0x163a <TMR0_voidSetCallBackOVF+0x22>
		TMR0_privatePtrToCAllBackOVF = ptrToFunc;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	90 93 13 02 	sts	0x0213, r25
    1636:	80 93 12 02 	sts	0x0212, r24
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <TMR0_voidSetCallBackCTC>:

// Function to set the callback function for timer0 CTC
void TMR0_voidSetCallBackCTC(void (*ptrToFunc)(void)) {
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <TMR0_voidSetCallBackCTC+0x6>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc != NULL)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	31 f0       	breq	.+12     	; 0x1666 <TMR0_voidSetCallBackCTC+0x22>
		TMR0_privatePtrToCAllBackCTC = ptrToFunc;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	90 93 15 02 	sts	0x0215, r25
    1662:	80 93 14 02 	sts	0x0214, r24
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <__vector_11>:
//////////////////////////////////***************ISR****************/////////////////////////////

// ISR for timer0 overflow
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16ovCounter = 0;
	local_u16ovCounter++;
    169a:	80 91 16 02 	lds	r24, 0x0216
    169e:	90 91 17 02 	lds	r25, 0x0217
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	90 93 17 02 	sts	0x0217, r25
    16a8:	80 93 16 02 	sts	0x0216, r24

	if (TMR0_ovCount == local_u16ovCounter) {
    16ac:	80 91 16 02 	lds	r24, 0x0216
    16b0:	90 91 17 02 	lds	r25, 0x0217
    16b4:	23 e0       	ldi	r18, 0x03	; 3
    16b6:	81 3d       	cpi	r24, 0xD1	; 209
    16b8:	92 07       	cpc	r25, r18
    16ba:	99 f4       	brne	.+38     	; 0x16e2 <__vector_11+0x72>
		// Reload preload value
		TCNT0 = TMR0_PRELOAD_VALUE;
    16bc:	e2 e5       	ldi	r30, 0x52	; 82
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	81 e7       	ldi	r24, 0x71	; 113
    16c2:	80 83       	st	Z, r24
		// Clear the counter
		local_u16ovCounter = 0;
    16c4:	10 92 17 02 	sts	0x0217, r1
    16c8:	10 92 16 02 	sts	0x0216, r1

		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackOVF != NULL) {
    16cc:	80 91 12 02 	lds	r24, 0x0212
    16d0:	90 91 13 02 	lds	r25, 0x0213
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <__vector_11+0x72>
			TMR0_privatePtrToCAllBackOVF();
    16d8:	e0 91 12 02 	lds	r30, 0x0212
    16dc:	f0 91 13 02 	lds	r31, 0x0213
    16e0:	09 95       	icall
		}
	}
}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_10>:

// ISR for timer0 output compare match
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32CTCCounter = 0;
	local_u32CTCCounter++;
    1732:	80 91 18 02 	lds	r24, 0x0218
    1736:	90 91 19 02 	lds	r25, 0x0219
    173a:	a0 91 1a 02 	lds	r26, 0x021A
    173e:	b0 91 1b 02 	lds	r27, 0x021B
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	a1 1d       	adc	r26, r1
    1746:	b1 1d       	adc	r27, r1
    1748:	80 93 18 02 	sts	0x0218, r24
    174c:	90 93 19 02 	sts	0x0219, r25
    1750:	a0 93 1a 02 	sts	0x021A, r26
    1754:	b0 93 1b 02 	sts	0x021B, r27

	if (private_ctcCounter == local_u32CTCCounter) {
    1758:	20 91 1c 02 	lds	r18, 0x021C
    175c:	30 91 1d 02 	lds	r19, 0x021D
    1760:	40 91 1e 02 	lds	r20, 0x021E
    1764:	50 91 1f 02 	lds	r21, 0x021F
    1768:	80 91 18 02 	lds	r24, 0x0218
    176c:	90 91 19 02 	lds	r25, 0x0219
    1770:	a0 91 1a 02 	lds	r26, 0x021A
    1774:	b0 91 1b 02 	lds	r27, 0x021B
    1778:	28 17       	cp	r18, r24
    177a:	39 07       	cpc	r19, r25
    177c:	4a 07       	cpc	r20, r26
    177e:	5b 07       	cpc	r21, r27
    1780:	99 f4       	brne	.+38     	; 0x17a8 <__vector_10+0xa0>
		// Clear the counter
		local_u32CTCCounter = 0;
    1782:	10 92 18 02 	sts	0x0218, r1
    1786:	10 92 19 02 	sts	0x0219, r1
    178a:	10 92 1a 02 	sts	0x021A, r1
    178e:	10 92 1b 02 	sts	0x021B, r1
		// Call the callback function if assigned
		if (TMR0_privatePtrToCAllBackCTC != NULL) {
    1792:	80 91 14 02 	lds	r24, 0x0214
    1796:	90 91 15 02 	lds	r25, 0x0215
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	29 f0       	breq	.+10     	; 0x17a8 <__vector_10+0xa0>
			TMR0_privatePtrToCAllBackCTC();
    179e:	e0 91 14 02 	lds	r30, 0x0214
    17a2:	f0 91 15 02 	lds	r31, 0x0215
    17a6:	09 95       	icall
		}
	}
}
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	ff 91       	pop	r31
    17ae:	ef 91       	pop	r30
    17b0:	bf 91       	pop	r27
    17b2:	af 91       	pop	r26
    17b4:	9f 91       	pop	r25
    17b6:	8f 91       	pop	r24
    17b8:	7f 91       	pop	r23
    17ba:	6f 91       	pop	r22
    17bc:	5f 91       	pop	r21
    17be:	4f 91       	pop	r20
    17c0:	3f 91       	pop	r19
    17c2:	2f 91       	pop	r18
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <TMR0_voidSetCompareMatchValue>:

// Function to set the output compare match value (OCR0) for CTC mode
void TMR0_voidSetCompareMatchValue(u8 copy_u8CompareValue) {
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8CompareValue;
    17da:	ec e5       	ldi	r30, 0x5C	; 92
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	80 83       	st	Z, r24
}
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <Port_Init>:
/*
 * function to intialize mcu ports based on the configurations set on  -->PORT_cnf.c
 * number of configurations NUM_OF_CNF and all r inside pin_cnf[NUM_OF_CNF]
 */

void Port_Init(const Port_ConfigType *pin_cfg) {
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <Port_Init+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <Port_Init+0x8>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <Port_Init+0xa>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03

	int i = 0;
    17fc:	1a 82       	std	Y+2, r1	; 0x02
    17fe:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < 32; i++) {
    1800:	1a 82       	std	Y+2, r1	; 0x02
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	ea c1       	rjmp	.+980    	; 0x1bda <Port_Init+0x3f0>

		if (pin_cfg[i].port == -1)
			break;

		switch (pin_cfg[i].port) {
    1806:	29 81       	ldd	r18, Y+1	; 0x01
    1808:	3a 81       	ldd	r19, Y+2	; 0x02
    180a:	c9 01       	movw	r24, r18
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	28 0f       	add	r18, r24
    1812:	39 1f       	adc	r19, r25
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	fc 01       	movw	r30, r24
    181a:	e2 0f       	add	r30, r18
    181c:	f3 1f       	adc	r31, r19
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3e 83       	std	Y+6, r19	; 0x06
    1826:	2d 83       	std	Y+5, r18	; 0x05
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <Port_Init+0x4a>
    1832:	85 c0       	rjmp	.+266    	; 0x193e <Port_Init+0x154>
    1834:	2d 81       	ldd	r18, Y+5	; 0x05
    1836:	3e 81       	ldd	r19, Y+6	; 0x06
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	2c f4       	brge	.+10     	; 0x1848 <Port_Init+0x5e>
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	71 f0       	breq	.+28     	; 0x1862 <Port_Init+0x78>
    1846:	c4 c1       	rjmp	.+904    	; 0x1bd0 <Port_Init+0x3e6>
    1848:	2d 81       	ldd	r18, Y+5	; 0x05
    184a:	3e 81       	ldd	r19, Y+6	; 0x06
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <Port_Init+0x6a>
    1852:	e3 c0       	rjmp	.+454    	; 0x1a1a <Port_Init+0x230>
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	83 30       	cpi	r24, 0x03	; 3
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <Port_Init+0x76>
    185e:	4b c1       	rjmp	.+662    	; 0x1af6 <Port_Init+0x30c>
    1860:	b7 c1       	rjmp	.+878    	; 0x1bd0 <Port_Init+0x3e6>

		case Dio_PORTA:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1862:	29 81       	ldd	r18, Y+1	; 0x01
    1864:	3a 81       	ldd	r19, Y+2	; 0x02
    1866:	c9 01       	movw	r24, r18
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	28 0f       	add	r18, r24
    186e:	39 1f       	adc	r19, r25
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	01 f5       	brne	.+64     	; 0x18c0 <Port_Init+0xd6>
				SET_BIT(DDRA, pin_cfg[i].pin);
    1880:	aa e3       	ldi	r26, 0x3A	; 58
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ea e3       	ldi	r30, 0x3A	; 58
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	29 81       	ldd	r18, Y+1	; 0x01
    188e:	3a 81       	ldd	r19, Y+2	; 0x02
    1890:	c9 01       	movw	r24, r18
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	28 0f       	add	r18, r24
    1898:	39 1f       	adc	r19, r25
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	fc 01       	movw	r30, r24
    18a0:	e2 0f       	add	r30, r18
    18a2:	f3 1f       	adc	r31, r19
    18a4:	81 81       	ldd	r24, Z+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <Port_Init+0xcc>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <Port_Init+0xc8>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	88 c1       	rjmp	.+784    	; 0x1bd0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRA, pin_cfg[i].pin);
    18c0:	aa e3       	ldi	r26, 0x3A	; 58
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	29 81       	ldd	r18, Y+1	; 0x01
    18ce:	3a 81       	ldd	r19, Y+2	; 0x02
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	28 0f       	add	r18, r24
    18d8:	39 1f       	adc	r19, r25
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	fc 01       	movw	r30, r24
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	81 81       	ldd	r24, Z+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <Port_Init+0x10a>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <Port_Init+0x106>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
				SET_BIT(PORTA, pin_cfg[i].pin);
    18fe:	ab e3       	ldi	r26, 0x3B	; 59
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	eb e3       	ldi	r30, 0x3B	; 59
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	29 81       	ldd	r18, Y+1	; 0x01
    190c:	3a 81       	ldd	r19, Y+2	; 0x02
    190e:	c9 01       	movw	r24, r18
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	28 0f       	add	r18, r24
    1916:	39 1f       	adc	r19, r25
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	fc 01       	movw	r30, r24
    191e:	e2 0f       	add	r30, r18
    1920:	f3 1f       	adc	r31, r19
    1922:	81 81       	ldd	r24, Z+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <Port_Init+0x14a>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <Port_Init+0x146>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	49 c1       	rjmp	.+658    	; 0x1bd0 <Port_Init+0x3e6>
			}
			break;
		case Dio_PORTB:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    193e:	29 81       	ldd	r18, Y+1	; 0x01
    1940:	3a 81       	ldd	r19, Y+2	; 0x02
    1942:	c9 01       	movw	r24, r18
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	28 0f       	add	r18, r24
    194a:	39 1f       	adc	r19, r25
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	fc 01       	movw	r30, r24
    1952:	e2 0f       	add	r30, r18
    1954:	f3 1f       	adc	r31, r19
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	01 f5       	brne	.+64     	; 0x199c <Port_Init+0x1b2>
				SET_BIT(DDRB, pin_cfg[i].pin);
    195c:	a7 e3       	ldi	r26, 0x37	; 55
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e7 e3       	ldi	r30, 0x37	; 55
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	29 81       	ldd	r18, Y+1	; 0x01
    196a:	3a 81       	ldd	r19, Y+2	; 0x02
    196c:	c9 01       	movw	r24, r18
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	28 0f       	add	r18, r24
    1974:	39 1f       	adc	r19, r25
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	81 81       	ldd	r24, Z+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <Port_Init+0x1a8>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <Port_Init+0x1a4>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	1a c1       	rjmp	.+564    	; 0x1bd0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRB, pin_cfg[i].pin);
    199c:	a7 e3       	ldi	r26, 0x37	; 55
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e7 e3       	ldi	r30, 0x37	; 55
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	29 81       	ldd	r18, Y+1	; 0x01
    19aa:	3a 81       	ldd	r19, Y+2	; 0x02
    19ac:	c9 01       	movw	r24, r18
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	28 0f       	add	r18, r24
    19b4:	39 1f       	adc	r19, r25
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	fc 01       	movw	r30, r24
    19bc:	e2 0f       	add	r30, r18
    19be:	f3 1f       	adc	r31, r19
    19c0:	81 81       	ldd	r24, Z+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <Port_Init+0x1e6>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	2a 95       	dec	r18
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <Port_Init+0x1e2>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
				SET_BIT(PORTB, pin_cfg[i].pin);
    19da:	a8 e3       	ldi	r26, 0x38	; 56
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e8 e3       	ldi	r30, 0x38	; 56
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ea:	c9 01       	movw	r24, r18
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	28 0f       	add	r18, r24
    19f2:	39 1f       	adc	r19, r25
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	81 81       	ldd	r24, Z+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <Port_Init+0x226>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <Port_Init+0x222>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	db c0       	rjmp	.+438    	; 0x1bd0 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTC:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1a1a:	29 81       	ldd	r18, Y+1	; 0x01
    1a1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a1e:	c9 01       	movw	r24, r18
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	28 0f       	add	r18, r24
    1a26:	39 1f       	adc	r19, r25
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	e2 0f       	add	r30, r18
    1a30:	f3 1f       	adc	r31, r19
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	01 f5       	brne	.+64     	; 0x1a78 <Port_Init+0x28e>
				SET_BIT(DDRC, pin_cfg[i].pin);
    1a38:	a4 e3       	ldi	r26, 0x34	; 52
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	3a 81       	ldd	r19, Y+2	; 0x02
    1a48:	c9 01       	movw	r24, r18
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	28 0f       	add	r18, r24
    1a50:	39 1f       	adc	r19, r25
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	fc 01       	movw	r30, r24
    1a58:	e2 0f       	add	r30, r18
    1a5a:	f3 1f       	adc	r31, r19
    1a5c:	81 81       	ldd	r24, Z+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <Port_Init+0x284>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <Port_Init+0x280>
    1a72:	84 2b       	or	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	ac c0       	rjmp	.+344    	; 0x1bd0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRC, pin_cfg[i].pin);
    1a78:	a4 e3       	ldi	r26, 0x34	; 52
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e4 e3       	ldi	r30, 0x34	; 52
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	3a 81       	ldd	r19, Y+2	; 0x02
    1a88:	c9 01       	movw	r24, r18
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	28 0f       	add	r18, r24
    1a90:	39 1f       	adc	r19, r25
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	fc 01       	movw	r30, r24
    1a98:	e2 0f       	add	r30, r18
    1a9a:	f3 1f       	adc	r31, r19
    1a9c:	81 81       	ldd	r24, Z+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <Port_Init+0x2c2>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	2a 95       	dec	r18
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <Port_Init+0x2be>
    1ab0:	80 95       	com	r24
    1ab2:	84 23       	and	r24, r20
    1ab4:	8c 93       	st	X, r24
				SET_BIT(PORTC, pin_cfg[i].pin);
    1ab6:	a5 e3       	ldi	r26, 0x35	; 53
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	29 81       	ldd	r18, Y+1	; 0x01
    1ac4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	28 0f       	add	r18, r24
    1ace:	39 1f       	adc	r19, r25
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	e2 0f       	add	r30, r18
    1ad8:	f3 1f       	adc	r31, r19
    1ada:	81 81       	ldd	r24, Z+1	; 0x01
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <Port_Init+0x302>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <Port_Init+0x2fe>
    1af0:	84 2b       	or	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	6d c0       	rjmp	.+218    	; 0x1bd0 <Port_Init+0x3e6>

			}

			break;
		case Dio_PORTD:
			if (pin_cfg[i].dir == PORT_PIN_OUT) {
    1af6:	29 81       	ldd	r18, Y+1	; 0x01
    1af8:	3a 81       	ldd	r19, Y+2	; 0x02
    1afa:	c9 01       	movw	r24, r18
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	28 0f       	add	r18, r24
    1b02:	39 1f       	adc	r19, r25
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e2 0f       	add	r30, r18
    1b0c:	f3 1f       	adc	r31, r19
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	01 f5       	brne	.+64     	; 0x1b54 <Port_Init+0x36a>
				SET_BIT(DDRD, pin_cfg[i].pin);
    1b14:	a1 e3       	ldi	r26, 0x31	; 49
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e1 e3       	ldi	r30, 0x31	; 49
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	29 81       	ldd	r18, Y+1	; 0x01
    1b22:	3a 81       	ldd	r19, Y+2	; 0x02
    1b24:	c9 01       	movw	r24, r18
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	28 0f       	add	r18, r24
    1b2c:	39 1f       	adc	r19, r25
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	81 81       	ldd	r24, Z+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <Port_Init+0x360>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <Port_Init+0x35c>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	3e c0       	rjmp	.+124    	; 0x1bd0 <Port_Init+0x3e6>
			} else {
				CLR_BIT(DDRD, pin_cfg[i].pin);
    1b54:	a1 e3       	ldi	r26, 0x31	; 49
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e1 e3       	ldi	r30, 0x31	; 49
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	29 81       	ldd	r18, Y+1	; 0x01
    1b62:	3a 81       	ldd	r19, Y+2	; 0x02
    1b64:	c9 01       	movw	r24, r18
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	28 0f       	add	r18, r24
    1b6c:	39 1f       	adc	r19, r25
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <Port_Init+0x39e>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	2a 95       	dec	r18
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <Port_Init+0x39a>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
				SET_BIT(PORTD, pin_cfg[i].pin);
    1b92:	a2 e3       	ldi	r26, 0x32	; 50
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e2 e3       	ldi	r30, 0x32	; 50
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	29 81       	ldd	r18, Y+1	; 0x01
    1ba0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	28 0f       	add	r18, r24
    1baa:	39 1f       	adc	r19, r25
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e2 0f       	add	r30, r18
    1bb4:	f3 1f       	adc	r31, r19
    1bb6:	81 81       	ldd	r24, Z+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <Port_Init+0x3de>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <Port_Init+0x3da>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
 */

void Port_Init(const Port_ConfigType *pin_cfg) {

	int i = 0;
	for (i = 0; i < 32; i++) {
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	80 32       	cpi	r24, 0x20	; 32
    1be0:	91 05       	cpc	r25, r1
    1be2:	0c f4       	brge	.+2      	; 0x1be6 <Port_Init+0x3fc>
    1be4:	10 ce       	rjmp	.-992    	; 0x1806 <Port_Init+0x1c>
//
//	default:
//		break;
		}
	}
}
    1be6:	26 96       	adiw	r28, 0x06	; 6
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <Port_SetPinDirection>:


void Port_SetPinDirection (Dio_ChannelType Pin,Port_PinDirectionType Direction)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <Port_SetPinDirection+0x6>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Port_SetPinDirection+0x8>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	6a 83       	std	Y+2, r22	; 0x02
	switch(Pin/8)
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	86 95       	lsr	r24
    1c0c:	86 95       	lsr	r24
    1c0e:	86 95       	lsr	r24
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3c 83       	std	Y+4, r19	; 0x04
    1c16:	2b 83       	std	Y+3, r18	; 0x03
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <Port_SetPinDirection+0x2c>
    1c22:	43 c0       	rjmp	.+134    	; 0x1caa <Port_SetPinDirection+0xb2>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	22 30       	cpi	r18, 0x02	; 2
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <Port_SetPinDirection+0x40>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	71 f0       	breq	.+28     	; 0x1c52 <Port_SetPinDirection+0x5a>
    1c36:	ce c0       	rjmp	.+412    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <Port_SetPinDirection+0x4c>
    1c42:	65 c0       	rjmp	.+202    	; 0x1d0e <Port_SetPinDirection+0x116>
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <Port_SetPinDirection+0x58>
    1c4e:	91 c0       	rjmp	.+290    	; 0x1d72 <Port_SetPinDirection+0x17a>
    1c50:	c1 c0       	rjmp	.+386    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
	{
	case Dio_PORTA:
		if(Direction == PORT_PIN_OUT)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	a1 f4       	brne	.+40     	; 0x1c80 <Port_SetPinDirection+0x88>
			SET_BIT(DDRA, Pin);
    1c58:	aa e3       	ldi	r26, 0x3A	; 58
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ea e3       	ldi	r30, 0x3A	; 58
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <Port_SetPinDirection+0x7e>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <Port_SetPinDirection+0x7a>
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	aa c0       	rjmp	.+340    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		else
			CLR_BIT(DDRA, Pin);
    1c80:	aa e3       	ldi	r26, 0x3A	; 58
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ea e3       	ldi	r30, 0x3A	; 58
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <Port_SetPinDirection+0xa6>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <Port_SetPinDirection+0xa2>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	95 c0       	rjmp	.+298    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		break;
	case Dio_PORTB:
		if(Direction == PORT_PIN_OUT)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	b9 f4       	brne	.+46     	; 0x1cde <Port_SetPinDirection+0xe6>
			SET_BIT(DDRB, Pin % 8);
    1cb0:	a7 e3       	ldi	r26, 0x37	; 55
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e7 e3       	ldi	r30, 0x37	; 55
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	27 70       	andi	r18, 0x07	; 7
    1cc6:	30 70       	andi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <Port_SetPinDirection+0xdc>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <Port_SetPinDirection+0xd8>
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	7b c0       	rjmp	.+246    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		else
			CLR_BIT(DDRB, Pin % 8);
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	27 70       	andi	r18, 0x07	; 7
    1cf4:	30 70       	andi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <Port_SetPinDirection+0x10a>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <Port_SetPinDirection+0x106>
    1d06:	80 95       	com	r24
    1d08:	84 23       	and	r24, r20
    1d0a:	8c 93       	st	X, r24
    1d0c:	63 c0       	rjmp	.+198    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		break;
	case Dio_PORTC:
		if(Direction == PORT_PIN_OUT)
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	b9 f4       	brne	.+46     	; 0x1d42 <Port_SetPinDirection+0x14a>
			SET_BIT(DDRC, Pin % 8);
    1d14:	a4 e3       	ldi	r26, 0x34	; 52
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e4 e3       	ldi	r30, 0x34	; 52
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 01       	movw	r18, r24
    1d28:	27 70       	andi	r18, 0x07	; 7
    1d2a:	30 70       	andi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <Port_SetPinDirection+0x140>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <Port_SetPinDirection+0x13c>
    1d3c:	84 2b       	or	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	49 c0       	rjmp	.+146    	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		else
			CLR_BIT(DDRC, Pin % 8);
    1d42:	a4 e3       	ldi	r26, 0x34	; 52
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e4 e3       	ldi	r30, 0x34	; 52
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9c 01       	movw	r18, r24
    1d56:	27 70       	andi	r18, 0x07	; 7
    1d58:	30 70       	andi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <Port_SetPinDirection+0x16e>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <Port_SetPinDirection+0x16a>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	31 c0       	rjmp	.+98     	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		break;
	case Dio_PORTD:
		if(Direction == PORT_PIN_OUT)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	b9 f4       	brne	.+46     	; 0x1da6 <Port_SetPinDirection+0x1ae>
			SET_BIT(DDRD, Pin % 8);
    1d78:	a1 e3       	ldi	r26, 0x31	; 49
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e1 e3       	ldi	r30, 0x31	; 49
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	27 70       	andi	r18, 0x07	; 7
    1d8e:	30 70       	andi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <Port_SetPinDirection+0x1a4>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <Port_SetPinDirection+0x1a0>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	17 c0       	rjmp	.+46     	; 0x1dd4 <Port_SetPinDirection+0x1dc>
		else
			CLR_BIT(DDRD, Pin % 8);
    1da6:	a1 e3       	ldi	r26, 0x31	; 49
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e1 e3       	ldi	r30, 0x31	; 49
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 01       	movw	r18, r24
    1dba:	27 70       	andi	r18, 0x07	; 7
    1dbc:	30 70       	andi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <Port_SetPinDirection+0x1d2>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <Port_SetPinDirection+0x1ce>
    1dce:	80 95       	com	r24
    1dd0:	84 23       	and	r24, r20
    1dd2:	8c 93       	st	X, r24
		break;
	default:	break;
	}
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <Dio_WriteChannel>:
#include "DIO_interface.h"

/*
 function to write an output chaneel */

void Dio_WriteChannel(unsigned char ChannelId, unsigned char Level) {
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <Dio_WriteChannel+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <Dio_WriteChannel+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02

//	unsigned char port = ;
	switch (ChannelId / 8) {
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	86 95       	lsr	r24
    1df6:	86 95       	lsr	r24
    1df8:	86 95       	lsr	r24
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3c 83       	std	Y+4, r19	; 0x04
    1e00:	2b 83       	std	Y+3, r18	; 0x03
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <Dio_WriteChannel+0x2c>
    1e0c:	43 c0       	rjmp	.+134    	; 0x1e94 <Dio_WriteChannel+0xb2>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <Dio_WriteChannel+0x40>
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	71 f0       	breq	.+28     	; 0x1e3c <Dio_WriteChannel+0x5a>
    1e20:	ce c0       	rjmp	.+412    	; 0x1fbe <Dio_WriteChannel+0x1dc>
    1e22:	2b 81       	ldd	r18, Y+3	; 0x03
    1e24:	3c 81       	ldd	r19, Y+4	; 0x04
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <Dio_WriteChannel+0x4c>
    1e2c:	65 c0       	rjmp	.+202    	; 0x1ef8 <Dio_WriteChannel+0x116>
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <Dio_WriteChannel+0x58>
    1e38:	91 c0       	rjmp	.+290    	; 0x1f5c <Dio_WriteChannel+0x17a>
    1e3a:	c1 c0       	rjmp	.+386    	; 0x1fbe <Dio_WriteChannel+0x1dc>
	case Dio_PORTA:
		if (Level == STD_HIGH) {
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	a1 f4       	brne	.+40     	; 0x1e6a <Dio_WriteChannel+0x88>
			SET_BIT(PORTA, ChannelId);
    1e42:	ab e3       	ldi	r26, 0x3B	; 59
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	eb e3       	ldi	r30, 0x3B	; 59
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <Dio_WriteChannel+0x7e>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <Dio_WriteChannel+0x7a>
    1e64:	84 2b       	or	r24, r20
    1e66:	8c 93       	st	X, r24
    1e68:	aa c0       	rjmp	.+340    	; 0x1fbe <Dio_WriteChannel+0x1dc>
		} else {
			CLR_BIT(PORTA, ChannelId);
    1e6a:	ab e3       	ldi	r26, 0x3B	; 59
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e3       	ldi	r30, 0x3B	; 59
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <Dio_WriteChannel+0xa6>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <Dio_WriteChannel+0xa2>
    1e8c:	80 95       	com	r24
    1e8e:	84 23       	and	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	95 c0       	rjmp	.+298    	; 0x1fbe <Dio_WriteChannel+0x1dc>
		}
		break;
	case Dio_PORTB:
		if (Level == STD_HIGH) {
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	b9 f4       	brne	.+46     	; 0x1ec8 <Dio_WriteChannel+0xe6>
			SET_BIT(PORTB, ChannelId % 8);
    1e9a:	a8 e3       	ldi	r26, 0x38	; 56
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9c 01       	movw	r18, r24
    1eae:	27 70       	andi	r18, 0x07	; 7
    1eb0:	30 70       	andi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <Dio_WriteChannel+0xdc>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <Dio_WriteChannel+0xd8>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	7b c0       	rjmp	.+246    	; 0x1fbe <Dio_WriteChannel+0x1dc>
		} else {
			CLR_BIT(PORTB, ChannelId % 8);
    1ec8:	a8 e3       	ldi	r26, 0x38	; 56
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e8 e3       	ldi	r30, 0x38	; 56
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 01       	movw	r18, r24
    1edc:	27 70       	andi	r18, 0x07	; 7
    1ede:	30 70       	andi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <Dio_WriteChannel+0x10a>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <Dio_WriteChannel+0x106>
    1ef0:	80 95       	com	r24
    1ef2:	84 23       	and	r24, r20
    1ef4:	8c 93       	st	X, r24
    1ef6:	63 c0       	rjmp	.+198    	; 0x1fbe <Dio_WriteChannel+0x1dc>
		}
		break;
	case Dio_PORTC:
		if (Level == STD_HIGH) {
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	b9 f4       	brne	.+46     	; 0x1f2c <Dio_WriteChannel+0x14a>
			SET_BIT(PORTC, ChannelId % 8);
    1efe:	a5 e3       	ldi	r26, 0x35	; 53
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e3       	ldi	r30, 0x35	; 53
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 01       	movw	r18, r24
    1f12:	27 70       	andi	r18, 0x07	; 7
    1f14:	30 70       	andi	r19, 0x00	; 0
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 2e       	mov	r0, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <Dio_WriteChannel+0x140>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	0a 94       	dec	r0
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <Dio_WriteChannel+0x13c>
    1f26:	84 2b       	or	r24, r20
    1f28:	8c 93       	st	X, r24
    1f2a:	49 c0       	rjmp	.+146    	; 0x1fbe <Dio_WriteChannel+0x1dc>
		} else {
			CLR_BIT(PORTC, ChannelId % 8);
    1f2c:	a5 e3       	ldi	r26, 0x35	; 53
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e5 e3       	ldi	r30, 0x35	; 53
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 01       	movw	r18, r24
    1f40:	27 70       	andi	r18, 0x07	; 7
    1f42:	30 70       	andi	r19, 0x00	; 0
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 2e       	mov	r0, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <Dio_WriteChannel+0x16e>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	0a 94       	dec	r0
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <Dio_WriteChannel+0x16a>
    1f54:	80 95       	com	r24
    1f56:	84 23       	and	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	31 c0       	rjmp	.+98     	; 0x1fbe <Dio_WriteChannel+0x1dc>
		}
		break;
	case Dio_PORTD:
		if (Level == STD_HIGH) {
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	b9 f4       	brne	.+46     	; 0x1f90 <Dio_WriteChannel+0x1ae>
			SET_BIT(PORTD, ChannelId % 8);
    1f62:	a2 e3       	ldi	r26, 0x32	; 50
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e2 e3       	ldi	r30, 0x32	; 50
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9c 01       	movw	r18, r24
    1f76:	27 70       	andi	r18, 0x07	; 7
    1f78:	30 70       	andi	r19, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	02 2e       	mov	r0, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <Dio_WriteChannel+0x1a4>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <Dio_WriteChannel+0x1a0>
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	17 c0       	rjmp	.+46     	; 0x1fbe <Dio_WriteChannel+0x1dc>
		} else {
			CLR_BIT(PORTD, ChannelId % 8);
    1f90:	a2 e3       	ldi	r26, 0x32	; 50
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	27 70       	andi	r18, 0x07	; 7
    1fa6:	30 70       	andi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <Dio_WriteChannel+0x1d2>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <Dio_WriteChannel+0x1ce>
    1fb8:	80 95       	com	r24
    1fba:	84 23       	and	r24, r20
    1fbc:	8c 93       	st	X, r24
		}
		break;
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <Dio_ReadChannel>:

/*
 function to read from an  input channel
 */
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId) {
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <Dio_ReadChannel+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <Dio_ReadChannel+0x8>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char port = ChannelId / 8;
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	86 95       	lsr	r24
    1fe0:	86 95       	lsr	r24
    1fe2:	86 95       	lsr	r24
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType level;

	switch (port) {
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3d 83       	std	Y+5, r19	; 0x05
    1fee:	2c 83       	std	Y+4, r18	; 0x04
    1ff0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ff2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ff4:	41 30       	cpi	r20, 0x01	; 1
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	49 f1       	breq	.+82     	; 0x204c <Dio_ReadChannel+0x80>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	91 05       	cpc	r25, r1
    2002:	34 f4       	brge	.+12     	; 0x2010 <Dio_ReadChannel+0x44>
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	69 f0       	breq	.+26     	; 0x2028 <Dio_ReadChannel+0x5c>
    200e:	59 c0       	rjmp	.+178    	; 0x20c2 <Dio_ReadChannel+0xf6>
    2010:	4c 81       	ldd	r20, Y+4	; 0x04
    2012:	5d 81       	ldd	r21, Y+5	; 0x05
    2014:	42 30       	cpi	r20, 0x02	; 2
    2016:	51 05       	cpc	r21, r1
    2018:	69 f1       	breq	.+90     	; 0x2074 <Dio_ReadChannel+0xa8>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <Dio_ReadChannel+0x5a>
    2024:	3b c0       	rjmp	.+118    	; 0x209c <Dio_ReadChannel+0xd0>
    2026:	4d c0       	rjmp	.+154    	; 0x20c2 <Dio_ReadChannel+0xf6>
	case Dio_PORTA:
		level = GET_BIT(PINA, ChannelId);
    2028:	e9 e3       	ldi	r30, 0x39	; 57
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <Dio_ReadChannel+0x74>
    203c:	55 95       	asr	r21
    203e:	47 95       	ror	r20
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <Dio_ReadChannel+0x70>
    2044:	ca 01       	movw	r24, r20
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	3b c0       	rjmp	.+118    	; 0x20c2 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTB:
		level = GET_BIT(PINB, ChannelId % 8);
    204c:	e6 e3       	ldi	r30, 0x36	; 54
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	87 70       	andi	r24, 0x07	; 7
    205e:	90 70       	andi	r25, 0x00	; 0
    2060:	a9 01       	movw	r20, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <Dio_ReadChannel+0x9c>
    2064:	55 95       	asr	r21
    2066:	47 95       	ror	r20
    2068:	8a 95       	dec	r24
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <Dio_ReadChannel+0x98>
    206c:	ca 01       	movw	r24, r20
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	27 c0       	rjmp	.+78     	; 0x20c2 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTC:
		level = GET_BIT(PINC, ChannelId % 8);
    2074:	e3 e3       	ldi	r30, 0x33	; 51
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	87 70       	andi	r24, 0x07	; 7
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	a9 01       	movw	r20, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <Dio_ReadChannel+0xc4>
    208c:	55 95       	asr	r21
    208e:	47 95       	ror	r20
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <Dio_ReadChannel+0xc0>
    2094:	ca 01       	movw	r24, r20
    2096:	81 70       	andi	r24, 0x01	; 1
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	13 c0       	rjmp	.+38     	; 0x20c2 <Dio_ReadChannel+0xf6>
		break;
	case Dio_PORTD:
		level = GET_BIT(PIND, ChannelId % 8);
    209c:	e0 e3       	ldi	r30, 0x30	; 48
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	87 70       	andi	r24, 0x07	; 7
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	a9 01       	movw	r20, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <Dio_ReadChannel+0xec>
    20b4:	55 95       	asr	r21
    20b6:	47 95       	ror	r20
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <Dio_ReadChannel+0xe8>
    20bc:	ca 01       	movw	r24, r20
    20be:	81 70       	andi	r24, 0x01	; 1
    20c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <Dio_FlipChannel>:
/*
 * function to toggle the state of a certain channel n get its value after toggeling
 */
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId) {
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <Dio_FlipChannel+0x6>
    20da:	00 d0       	rcall	.+0      	; 0x20dc <Dio_FlipChannel+0x8>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType level;
	switch (ChannelId / 8) {
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	86 95       	lsr	r24
    20e6:	86 95       	lsr	r24
    20e8:	86 95       	lsr	r24
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3c 83       	std	Y+4, r19	; 0x04
    20f0:	2b 83       	std	Y+3, r18	; 0x03
    20f2:	4b 81       	ldd	r20, Y+3	; 0x03
    20f4:	5c 81       	ldd	r21, Y+4	; 0x04
    20f6:	41 30       	cpi	r20, 0x01	; 1
    20f8:	51 05       	cpc	r21, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <Dio_FlipChannel+0x2a>
    20fc:	3c c0       	rjmp	.+120    	; 0x2176 <Dio_FlipChannel+0xa2>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	91 05       	cpc	r25, r1
    2106:	34 f4       	brge	.+12     	; 0x2114 <Dio_FlipChannel+0x40>
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	21 15       	cp	r18, r1
    210e:	31 05       	cpc	r19, r1
    2110:	71 f0       	breq	.+28     	; 0x212e <Dio_FlipChannel+0x5a>
    2112:	ab c0       	rjmp	.+342    	; 0x226a <Dio_FlipChannel+0x196>
    2114:	4b 81       	ldd	r20, Y+3	; 0x03
    2116:	5c 81       	ldd	r21, Y+4	; 0x04
    2118:	42 30       	cpi	r20, 0x02	; 2
    211a:	51 05       	cpc	r21, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <Dio_FlipChannel+0x4c>
    211e:	54 c0       	rjmp	.+168    	; 0x21c8 <Dio_FlipChannel+0xf4>
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	91 05       	cpc	r25, r1
    2128:	09 f4       	brne	.+2      	; 0x212c <Dio_FlipChannel+0x58>
    212a:	77 c0       	rjmp	.+238    	; 0x221a <Dio_FlipChannel+0x146>
    212c:	9e c0       	rjmp	.+316    	; 0x226a <Dio_FlipChannel+0x196>
	case Dio_PORTA:
		TOG_BIT(PORTA, ChannelId);
    212e:	ab e3       	ldi	r26, 0x3B	; 59
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <Dio_FlipChannel+0x76>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	2a 95       	dec	r18
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <Dio_FlipChannel+0x72>
    214e:	84 27       	eor	r24, r20
    2150:	8c 93       	st	X, r24
		level = GET_BIT(PORTA, ChannelId);
    2152:	eb e3       	ldi	r30, 0x3B	; 59
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <Dio_FlipChannel+0x96>
    2166:	55 95       	asr	r21
    2168:	47 95       	ror	r20
    216a:	8a 95       	dec	r24
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <Dio_FlipChannel+0x92>
    216e:	ca 01       	movw	r24, r20
    2170:	81 70       	andi	r24, 0x01	; 1
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	7a c0       	rjmp	.+244    	; 0x226a <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTB:
		TOG_BIT(PORTB, ChannelId % 8);
    2176:	a8 e3       	ldi	r26, 0x38	; 56
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c 01       	movw	r18, r24
    218a:	27 70       	andi	r18, 0x07	; 7
    218c:	30 70       	andi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <Dio_FlipChannel+0xc4>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	2a 95       	dec	r18
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <Dio_FlipChannel+0xc0>
    219c:	84 27       	eor	r24, r20
    219e:	8c 93       	st	X, r24
		level = GET_BIT(PORTB, ChannelId % 8);
    21a0:	e8 e3       	ldi	r30, 0x38	; 56
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	87 70       	andi	r24, 0x07	; 7
    21b2:	90 70       	andi	r25, 0x00	; 0
    21b4:	a9 01       	movw	r20, r18
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <Dio_FlipChannel+0xe8>
    21b8:	55 95       	asr	r21
    21ba:	47 95       	ror	r20
    21bc:	8a 95       	dec	r24
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <Dio_FlipChannel+0xe4>
    21c0:	ca 01       	movw	r24, r20
    21c2:	81 70       	andi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	51 c0       	rjmp	.+162    	; 0x226a <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTC:
		TOG_BIT(PORTC, ChannelId % 8);
    21c8:	a5 e3       	ldi	r26, 0x35	; 53
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e5 e3       	ldi	r30, 0x35	; 53
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	48 2f       	mov	r20, r24
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9c 01       	movw	r18, r24
    21dc:	27 70       	andi	r18, 0x07	; 7
    21de:	30 70       	andi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <Dio_FlipChannel+0x116>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	2a 95       	dec	r18
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <Dio_FlipChannel+0x112>
    21ee:	84 27       	eor	r24, r20
    21f0:	8c 93       	st	X, r24
		level = GET_BIT(PORTC, ChannelId % 8);
    21f2:	e5 e3       	ldi	r30, 0x35	; 53
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	87 70       	andi	r24, 0x07	; 7
    2204:	90 70       	andi	r25, 0x00	; 0
    2206:	a9 01       	movw	r20, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <Dio_FlipChannel+0x13a>
    220a:	55 95       	asr	r21
    220c:	47 95       	ror	r20
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <Dio_FlipChannel+0x136>
    2212:	ca 01       	movw	r24, r20
    2214:	81 70       	andi	r24, 0x01	; 1
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	28 c0       	rjmp	.+80     	; 0x226a <Dio_FlipChannel+0x196>
		break;
	case Dio_PORTD:
		TOG_BIT(PORTD, ChannelId % 8);
    221a:	a2 e3       	ldi	r26, 0x32	; 50
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e2 e3       	ldi	r30, 0x32	; 50
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 01       	movw	r18, r24
    222e:	27 70       	andi	r18, 0x07	; 7
    2230:	30 70       	andi	r19, 0x00	; 0
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <Dio_FlipChannel+0x168>
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	2a 95       	dec	r18
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <Dio_FlipChannel+0x164>
    2240:	84 27       	eor	r24, r20
    2242:	8c 93       	st	X, r24
		level = GET_BIT(PORTD, ChannelId % 8);
    2244:	e2 e3       	ldi	r30, 0x32	; 50
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	87 70       	andi	r24, 0x07	; 7
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	a9 01       	movw	r20, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <Dio_FlipChannel+0x18c>
    225c:	55 95       	asr	r21
    225e:	47 95       	ror	r20
    2260:	8a 95       	dec	r24
    2262:	e2 f7       	brpl	.-8      	; 0x225c <Dio_FlipChannel+0x188>
    2264:	ca 01       	movw	r24, r20
    2266:	81 70       	andi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	return level;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <Dio_WritePort>:
/*
 * function to wright full port
 */
void Dio_WritePort(Dio_PortType Portx,u8 data){
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <Dio_WritePort+0x6>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <Dio_WritePort+0x8>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	6a 83       	std	Y+2, r22	; 0x02

	switch(Portx){
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	3c 83       	std	Y+4, r19	; 0x04
    2292:	2b 83       	std	Y+3, r18	; 0x03
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	91 05       	cpc	r25, r1
    229c:	d1 f0       	breq	.+52     	; 0x22d2 <Dio_WritePort+0x58>
    229e:	2b 81       	ldd	r18, Y+3	; 0x03
    22a0:	3c 81       	ldd	r19, Y+4	; 0x04
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	31 05       	cpc	r19, r1
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <Dio_WritePort+0x38>
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	9c 81       	ldd	r25, Y+4	; 0x04
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	61 f0       	breq	.+24     	; 0x22c8 <Dio_WritePort+0x4e>
    22b0:	1e c0       	rjmp	.+60     	; 0x22ee <Dio_WritePort+0x74>
    22b2:	2b 81       	ldd	r18, Y+3	; 0x03
    22b4:	3c 81       	ldd	r19, Y+4	; 0x04
    22b6:	22 30       	cpi	r18, 0x02	; 2
    22b8:	31 05       	cpc	r19, r1
    22ba:	81 f0       	breq	.+32     	; 0x22dc <Dio_WritePort+0x62>
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	83 30       	cpi	r24, 0x03	; 3
    22c2:	91 05       	cpc	r25, r1
    22c4:	81 f0       	breq	.+32     	; 0x22e6 <Dio_WritePort+0x6c>
    22c6:	13 c0       	rjmp	.+38     	; 0x22ee <Dio_WritePort+0x74>
		case Dio_PORTA:
			PORTA = data;
    22c8:	eb e3       	ldi	r30, 0x3B	; 59
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	80 83       	st	Z, r24
    22d0:	0e c0       	rjmp	.+28     	; 0x22ee <Dio_WritePort+0x74>
		break;
		case Dio_PORTB:
			PORTB = data;
    22d2:	e8 e3       	ldi	r30, 0x38	; 56
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	80 83       	st	Z, r24
    22da:	09 c0       	rjmp	.+18     	; 0x22ee <Dio_WritePort+0x74>
		break;
		case Dio_PORTC:
			PORTC = data;
    22dc:	e5 e3       	ldi	r30, 0x35	; 53
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	80 83       	st	Z, r24
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <Dio_WritePort+0x74>
		break;
		case Dio_PORTD:
			PORTD = data;
    22e6:	e2 e3       	ldi	r30, 0x32	; 50
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	80 83       	st	Z, r24
		break;
	}
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <SRVM_voidOn>:
#include "../../utils/BIT_MATH.h"
#include "../../MCAL/TIMERS/TIMER1/includes/TMR1_interface.h"

static u8 flag = 0;

void SRVM_voidOn(u8 Copy_u8Angle) {
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <SRVM_voidOn+0x6>
    2302:	00 d0       	rcall	.+0      	; 0x2304 <SRVM_voidOn+0x8>
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8d 83       	std	Y+5, r24	; 0x05
    /* TMR1 init at pwm mode 14 */
    if (flag == 0) {
    230c:	80 91 20 02 	lds	r24, 0x0220
    2310:	88 23       	and	r24, r24
    2312:	49 f4       	brne	.+18     	; 0x2326 <SRVM_voidOn+0x2a>
        TMR1_voidInit();
    2314:	0e 94 ee 09 	call	0x13dc	; 0x13dc <TMR1_voidInit>
        flag = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 20 02 	sts	0x0220, r24
        /* Set pwm fre. = 50 */
        TMR1_voidSetFrequencyMode14FastPWM(50);
    231e:	82 e3       	ldi	r24, 0x32	; 50
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 5f 09 	call	0x12be	; 0x12be <TMR1_voidSetFrequencyMode14FastPWM>
    }

    /* Set pwm duty cycle between 5 : 10
    depend on desired angle[0 : 180] */
    F32 duty_cycle = (F32)(5.0 + (Copy_u8Angle * (5.0 / 180.0)));
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	aa 27       	eor	r26, r26
    232e:	97 fd       	sbrc	r25, 7
    2330:	a0 95       	com	r26
    2332:	ba 2f       	mov	r27, r26
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	29 e3       	ldi	r18, 0x39	; 57
    2346:	3e e8       	ldi	r19, 0x8E	; 142
    2348:	43 ee       	ldi	r20, 0xE3	; 227
    234a:	5c e3       	ldi	r21, 0x3C	; 60
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 ea       	ldi	r20, 0xA0	; 160
    235e:	50 e4       	ldi	r21, 0x40	; 64
    2360:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	ab 83       	std	Y+3, r26	; 0x03
    236e:	bc 83       	std	Y+4, r27	; 0x04
    TMR1_voidSetDutyCycleMode14FastPWM(duty_cycle);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	ab 81       	ldd	r26, Y+3	; 0x03
    2376:	bc 81       	ldd	r27, Y+4	; 0x04
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 84 09 	call	0x1308	; 0x1308 <TMR1_voidSetDutyCycleMode14FastPWM>

    /* TMR1 start */
    TMR1_voidStart();
    2380:	0e 94 35 0a 	call	0x146a	; 0x146a <TMR1_voidStart>
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <SRVM_voidOff>:

void SRVM_voidOff(void) {
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    /* TMR1 stop */
    TMR1_voidStop();
    239c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <TMR1_voidStop>
}
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <LCD_SendData>:
#include "avr/delay.h"

static u8 current_pos = 0;


void LCD_SendData(u8 data) {
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	e9 97       	sbiw	r28, 0x39	; 57
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_HIGH);
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    // Send data through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(data, 4));
    23c4:	89 ad       	ldd	r24, Y+57	; 0x39
    23c6:	82 95       	swap	r24
    23c8:	8f 70       	andi	r24, 0x0F	; 15
    23ca:	98 2f       	mov	r25, r24
    23cc:	91 70       	andi	r25, 0x01	; 1
    23ce:	88 e0       	ldi	r24, 0x08	; 8
    23d0:	69 2f       	mov	r22, r25
    23d2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 5));
    23d6:	89 ad       	ldd	r24, Y+57	; 0x39
    23d8:	82 95       	swap	r24
    23da:	86 95       	lsr	r24
    23dc:	87 70       	andi	r24, 0x07	; 7
    23de:	98 2f       	mov	r25, r24
    23e0:	91 70       	andi	r25, 0x01	; 1
    23e2:	89 e0       	ldi	r24, 0x09	; 9
    23e4:	69 2f       	mov	r22, r25
    23e6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 6));
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	82 95       	swap	r24
    23ee:	86 95       	lsr	r24
    23f0:	86 95       	lsr	r24
    23f2:	83 70       	andi	r24, 0x03	; 3
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	8a e0       	ldi	r24, 0x0A	; 10
    23fa:	69 2f       	mov	r22, r25
    23fc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 7));
    2400:	89 ad       	ldd	r24, Y+57	; 0x39
    2402:	98 2f       	mov	r25, r24
    2404:	99 1f       	adc	r25, r25
    2406:	99 27       	eor	r25, r25
    2408:	99 1f       	adc	r25, r25
    240a:	8c e0       	ldi	r24, 0x0C	; 12
    240c:	69 2f       	mov	r22, r25
    240e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	8d ab       	std	Y+53, r24	; 0x35
    2424:	9e ab       	std	Y+54, r25	; 0x36
    2426:	af ab       	std	Y+55, r26	; 0x37
    2428:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	6d a9       	ldd	r22, Y+53	; 0x35
    242c:	7e a9       	ldd	r23, Y+54	; 0x36
    242e:	8f a9       	ldd	r24, Y+55	; 0x37
    2430:	98 ad       	ldd	r25, Y+56	; 0x38
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a e7       	ldi	r20, 0x7A	; 122
    2438:	55 e4       	ldi	r21, 0x45	; 69
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	89 ab       	std	Y+49, r24	; 0x31
    2444:	9a ab       	std	Y+50, r25	; 0x32
    2446:	ab ab       	std	Y+51, r26	; 0x33
    2448:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    244a:	69 a9       	ldd	r22, Y+49	; 0x31
    244c:	7a a9       	ldd	r23, Y+50	; 0x32
    244e:	8b a9       	ldd	r24, Y+51	; 0x33
    2450:	9c a9       	ldd	r25, Y+52	; 0x34
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_SendData+0xc6>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <LCD_SendData+0x144>
	else if (__tmp > 65535)
    246c:	69 a9       	ldd	r22, Y+49	; 0x31
    246e:	7a a9       	ldd	r23, Y+50	; 0x32
    2470:	8b a9       	ldd	r24, Y+51	; 0x33
    2472:	9c a9       	ldd	r25, Y+52	; 0x34
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <LCD_SendData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	6d a9       	ldd	r22, Y+53	; 0x35
    2486:	7e a9       	ldd	r23, Y+54	; 0x36
    2488:	8f a9       	ldd	r24, Y+55	; 0x37
    248a:	98 ad       	ldd	r25, Y+56	; 0x38
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	98 ab       	std	Y+48, r25	; 0x30
    24aa:	8f a7       	std	Y+47, r24	; 0x2f
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_SendData+0x126>
    24ae:	80 e9       	ldi	r24, 0x90	; 144
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9e a7       	std	Y+46, r25	; 0x2e
    24b4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_SendData+0x114>
    24be:	9e a7       	std	Y+46, r25	; 0x2e
    24c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c4:	98 a9       	ldd	r25, Y+48	; 0x30
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	98 ab       	std	Y+48, r25	; 0x30
    24ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <LCD_SendData+0x108>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <LCD_SendData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	69 a9       	ldd	r22, Y+49	; 0x31
    24d8:	7a a9       	ldd	r23, Y+50	; 0x32
    24da:	8b a9       	ldd	r24, Y+51	; 0x33
    24dc:	9c a9       	ldd	r25, Y+52	; 0x34
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ec:	98 a9       	ldd	r25, Y+48	; 0x30
    24ee:	9c a7       	std	Y+44, r25	; 0x2c
    24f0:	8b a7       	std	Y+43, r24	; 0x2b
    24f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_SendData+0x150>
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e8       	ldi	r26, 0x80	; 128
    250c:	bf e3       	ldi	r27, 0x3F	; 63
    250e:	8f a3       	std	Y+39, r24	; 0x27
    2510:	98 a7       	std	Y+40, r25	; 0x28
    2512:	a9 a7       	std	Y+41, r26	; 0x29
    2514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	6f a1       	ldd	r22, Y+39	; 0x27
    2518:	78 a5       	ldd	r23, Y+40	; 0x28
    251a:	89 a5       	ldd	r24, Y+41	; 0x29
    251c:	9a a5       	ldd	r25, Y+42	; 0x2a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	55 e4       	ldi	r21, 0x45	; 69
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8b a3       	std	Y+35, r24	; 0x23
    2530:	9c a3       	std	Y+36, r25	; 0x24
    2532:	ad a3       	std	Y+37, r26	; 0x25
    2534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2536:	6b a1       	ldd	r22, Y+35	; 0x23
    2538:	7c a1       	ldd	r23, Y+36	; 0x24
    253a:	8d a1       	ldd	r24, Y+37	; 0x25
    253c:	9e a1       	ldd	r25, Y+38	; 0x26
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_SendData+0x1b2>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9a a3       	std	Y+34, r25	; 0x22
    2554:	89 a3       	std	Y+33, r24	; 0x21
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_SendData+0x230>
	else if (__tmp > 65535)
    2558:	6b a1       	ldd	r22, Y+35	; 0x23
    255a:	7c a1       	ldd	r23, Y+36	; 0x24
    255c:	8d a1       	ldd	r24, Y+37	; 0x25
    255e:	9e a1       	ldd	r25, Y+38	; 0x26
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_SendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	6f a1       	ldd	r22, Y+39	; 0x27
    2572:	78 a5       	ldd	r23, Y+40	; 0x28
    2574:	89 a5       	ldd	r24, Y+41	; 0x29
    2576:	9a a5       	ldd	r25, Y+42	; 0x2a
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9a a3       	std	Y+34, r25	; 0x22
    2596:	89 a3       	std	Y+33, r24	; 0x21
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_SendData+0x212>
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	98 a3       	std	Y+32, r25	; 0x20
    25a0:	8f 8f       	std	Y+31, r24	; 0x1f
    25a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a4:	98 a1       	ldd	r25, Y+32	; 0x20
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_SendData+0x200>
    25aa:	98 a3       	std	Y+32, r25	; 0x20
    25ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	89 a1       	ldd	r24, Y+33	; 0x21
    25b0:	9a a1       	ldd	r25, Y+34	; 0x22
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9a a3       	std	Y+34, r25	; 0x22
    25b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_SendData+0x1f4>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <LCD_SendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6b a1       	ldd	r22, Y+35	; 0x23
    25c4:	7c a1       	ldd	r23, Y+36	; 0x24
    25c6:	8d a1       	ldd	r24, Y+37	; 0x25
    25c8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9a a3       	std	Y+34, r25	; 0x22
    25d4:	89 a3       	std	Y+33, r24	; 0x21
    25d6:	89 a1       	ldd	r24, Y+33	; 0x21
    25d8:	9a a1       	ldd	r25, Y+34	; 0x22
    25da:	9e 8f       	std	Y+30, r25	; 0x1e
    25dc:	8d 8f       	std	Y+29, r24	; 0x1d
    25de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_SendData+0x23c>
    25e6:	9e 8f       	std	Y+30, r25	; 0x1e
    25e8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits
    Dio_WriteChannel(D4, GET_BIT(data, 0));
    25ea:	89 ad       	ldd	r24, Y+57	; 0x39
    25ec:	98 2f       	mov	r25, r24
    25ee:	91 70       	andi	r25, 0x01	; 1
    25f0:	88 e0       	ldi	r24, 0x08	; 8
    25f2:	69 2f       	mov	r22, r25
    25f4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(data, 1));
    25f8:	89 ad       	ldd	r24, Y+57	; 0x39
    25fa:	86 95       	lsr	r24
    25fc:	98 2f       	mov	r25, r24
    25fe:	91 70       	andi	r25, 0x01	; 1
    2600:	89 e0       	ldi	r24, 0x09	; 9
    2602:	69 2f       	mov	r22, r25
    2604:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(data, 2));
    2608:	89 ad       	ldd	r24, Y+57	; 0x39
    260a:	86 95       	lsr	r24
    260c:	86 95       	lsr	r24
    260e:	98 2f       	mov	r25, r24
    2610:	91 70       	andi	r25, 0x01	; 1
    2612:	8a e0       	ldi	r24, 0x0A	; 10
    2614:	69 2f       	mov	r22, r25
    2616:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(data, 3));
    261a:	89 ad       	ldd	r24, Y+57	; 0x39
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	86 95       	lsr	r24
    2622:	98 2f       	mov	r25, r24
    2624:	91 70       	andi	r25, 0x01	; 1
    2626:	8c e0       	ldi	r24, 0x0C	; 12
    2628:	69 2f       	mov	r22, r25
    262a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e8       	ldi	r26, 0x80	; 128
    263c:	bf e3       	ldi	r27, 0x3F	; 63
    263e:	89 8f       	std	Y+25, r24	; 0x19
    2640:	9a 8f       	std	Y+26, r25	; 0x1a
    2642:	ab 8f       	std	Y+27, r26	; 0x1b
    2644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	69 8d       	ldd	r22, Y+25	; 0x19
    2648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	55 e4       	ldi	r21, 0x45	; 69
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8d 8b       	std	Y+21, r24	; 0x15
    2660:	9e 8b       	std	Y+22, r25	; 0x16
    2662:	af 8b       	std	Y+23, r26	; 0x17
    2664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_SendData+0x2e2>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_SendData+0x360>
	else if (__tmp > 65535)
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_SendData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	69 8d       	ldd	r22, Y+25	; 0x19
    26a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_SendData+0x342>
    26ca:	80 e9       	ldi	r24, 0x90	; 144
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	9a 8b       	std	Y+18, r25	; 0x12
    26d0:	89 8b       	std	Y+17, r24	; 0x11
    26d2:	89 89       	ldd	r24, Y+17	; 0x11
    26d4:	9a 89       	ldd	r25, Y+18	; 0x12
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_SendData+0x330>
    26da:	9a 8b       	std	Y+18, r25	; 0x12
    26dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8b 89       	ldd	r24, Y+19	; 0x13
    26e0:	9c 89       	ldd	r25, Y+20	; 0x14
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	9c 89       	ldd	r25, Y+20	; 0x14
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_SendData+0x324>
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <LCD_SendData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9c 8b       	std	Y+20, r25	; 0x14
    2704:	8b 8b       	std	Y+19, r24	; 0x13
    2706:	8b 89       	ldd	r24, Y+19	; 0x13
    2708:	9c 89       	ldd	r25, Y+20	; 0x14
    270a:	98 8b       	std	Y+16, r25	; 0x10
    270c:	8f 87       	std	Y+15, r24	; 0x0f
    270e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2710:	98 89       	ldd	r25, Y+16	; 0x10
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_SendData+0x36c>
    2716:	98 8b       	std	Y+16, r25	; 0x10
    2718:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e8       	ldi	r26, 0x80	; 128
    2728:	bf e3       	ldi	r27, 0x3F	; 63
    272a:	8b 87       	std	Y+11, r24	; 0x0b
    272c:	9c 87       	std	Y+12, r25	; 0x0c
    272e:	ad 87       	std	Y+13, r26	; 0x0d
    2730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2732:	6b 85       	ldd	r22, Y+11	; 0x0b
    2734:	7c 85       	ldd	r23, Y+12	; 0x0c
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	9e 85       	ldd	r25, Y+14	; 0x0e
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	55 e4       	ldi	r21, 0x45	; 69
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8f 83       	std	Y+7, r24	; 0x07
    274c:	98 87       	std	Y+8, r25	; 0x08
    274e:	a9 87       	std	Y+9, r26	; 0x09
    2750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <LCD_SendData+0x3ce>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <LCD_SendData+0x44c>
	else if (__tmp > 65535)
    2774:	6f 81       	ldd	r22, Y+7	; 0x07
    2776:	78 85       	ldd	r23, Y+8	; 0x08
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	9a 85       	ldd	r25, Y+10	; 0x0a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <LCD_SendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	6b 85       	ldd	r22, Y+11	; 0x0b
    278e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <LCD_SendData+0x42e>
    27b6:	80 e9       	ldi	r24, 0x90	; 144
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <LCD_SendData+0x41c>
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	69 f7       	brne	.-38     	; 0x27b6 <LCD_SendData+0x410>
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <LCD_SendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <LCD_SendData+0x458>
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    2806:	e9 96       	adiw	r28, 0x39	; 57
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <LCD_SendCMD>:

void LCD_SendCMD(u8 command) {
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	e9 97       	sbiw	r28, 0x39	; 57
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	89 af       	std	Y+57, r24	; 0x39
    Dio_WriteChannel(RS, STD_LOW);
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    // Send command through D4-D7 pins
    Dio_WriteChannel(D4, GET_BIT(command, 4));
    2836:	89 ad       	ldd	r24, Y+57	; 0x39
    2838:	82 95       	swap	r24
    283a:	8f 70       	andi	r24, 0x0F	; 15
    283c:	98 2f       	mov	r25, r24
    283e:	91 70       	andi	r25, 0x01	; 1
    2840:	88 e0       	ldi	r24, 0x08	; 8
    2842:	69 2f       	mov	r22, r25
    2844:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 5));
    2848:	89 ad       	ldd	r24, Y+57	; 0x39
    284a:	82 95       	swap	r24
    284c:	86 95       	lsr	r24
    284e:	87 70       	andi	r24, 0x07	; 7
    2850:	98 2f       	mov	r25, r24
    2852:	91 70       	andi	r25, 0x01	; 1
    2854:	89 e0       	ldi	r24, 0x09	; 9
    2856:	69 2f       	mov	r22, r25
    2858:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 6));
    285c:	89 ad       	ldd	r24, Y+57	; 0x39
    285e:	82 95       	swap	r24
    2860:	86 95       	lsr	r24
    2862:	86 95       	lsr	r24
    2864:	83 70       	andi	r24, 0x03	; 3
    2866:	98 2f       	mov	r25, r24
    2868:	91 70       	andi	r25, 0x01	; 1
    286a:	8a e0       	ldi	r24, 0x0A	; 10
    286c:	69 2f       	mov	r22, r25
    286e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 7));
    2872:	89 ad       	ldd	r24, Y+57	; 0x39
    2874:	98 2f       	mov	r25, r24
    2876:	99 1f       	adc	r25, r25
    2878:	99 27       	eor	r25, r25
    287a:	99 1f       	adc	r25, r25
    287c:	8c e0       	ldi	r24, 0x0C	; 12
    287e:	69 2f       	mov	r22, r25
    2880:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e8       	ldi	r26, 0x80	; 128
    2892:	bf e3       	ldi	r27, 0x3F	; 63
    2894:	8d ab       	std	Y+53, r24	; 0x35
    2896:	9e ab       	std	Y+54, r25	; 0x36
    2898:	af ab       	std	Y+55, r26	; 0x37
    289a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	6d a9       	ldd	r22, Y+53	; 0x35
    289e:	7e a9       	ldd	r23, Y+54	; 0x36
    28a0:	8f a9       	ldd	r24, Y+55	; 0x37
    28a2:	98 ad       	ldd	r25, Y+56	; 0x38
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a e7       	ldi	r20, 0x7A	; 122
    28aa:	55 e4       	ldi	r21, 0x45	; 69
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	89 ab       	std	Y+49, r24	; 0x31
    28b6:	9a ab       	std	Y+50, r25	; 0x32
    28b8:	ab ab       	std	Y+51, r26	; 0x33
    28ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28bc:	69 a9       	ldd	r22, Y+49	; 0x31
    28be:	7a a9       	ldd	r23, Y+50	; 0x32
    28c0:	8b a9       	ldd	r24, Y+51	; 0x33
    28c2:	9c a9       	ldd	r25, Y+52	; 0x34
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_SendCMD+0xc6>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	98 ab       	std	Y+48, r25	; 0x30
    28da:	8f a7       	std	Y+47, r24	; 0x2f
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_SendCMD+0x144>
	else if (__tmp > 65535)
    28de:	69 a9       	ldd	r22, Y+49	; 0x31
    28e0:	7a a9       	ldd	r23, Y+50	; 0x32
    28e2:	8b a9       	ldd	r24, Y+51	; 0x33
    28e4:	9c a9       	ldd	r25, Y+52	; 0x34
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_SendCMD+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	6d a9       	ldd	r22, Y+53	; 0x35
    28f8:	7e a9       	ldd	r23, Y+54	; 0x36
    28fa:	8f a9       	ldd	r24, Y+55	; 0x37
    28fc:	98 ad       	ldd	r25, Y+56	; 0x38
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	98 ab       	std	Y+48, r25	; 0x30
    291c:	8f a7       	std	Y+47, r24	; 0x2f
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_SendCMD+0x126>
    2920:	80 e9       	ldi	r24, 0x90	; 144
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	9e a7       	std	Y+46, r25	; 0x2e
    2926:	8d a7       	std	Y+45, r24	; 0x2d
    2928:	8d a5       	ldd	r24, Y+45	; 0x2d
    292a:	9e a5       	ldd	r25, Y+46	; 0x2e
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_SendCMD+0x114>
    2930:	9e a7       	std	Y+46, r25	; 0x2e
    2932:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	8f a5       	ldd	r24, Y+47	; 0x2f
    2936:	98 a9       	ldd	r25, Y+48	; 0x30
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	98 ab       	std	Y+48, r25	; 0x30
    293c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2940:	98 a9       	ldd	r25, Y+48	; 0x30
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_SendCMD+0x108>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_SendCMD+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	69 a9       	ldd	r22, Y+49	; 0x31
    294a:	7a a9       	ldd	r23, Y+50	; 0x32
    294c:	8b a9       	ldd	r24, Y+51	; 0x33
    294e:	9c a9       	ldd	r25, Y+52	; 0x34
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	98 ab       	std	Y+48, r25	; 0x30
    295a:	8f a7       	std	Y+47, r24	; 0x2f
    295c:	8f a5       	ldd	r24, Y+47	; 0x2f
    295e:	98 a9       	ldd	r25, Y+48	; 0x30
    2960:	9c a7       	std	Y+44, r25	; 0x2c
    2962:	8b a7       	std	Y+43, r24	; 0x2b
    2964:	8b a5       	ldd	r24, Y+43	; 0x2b
    2966:	9c a5       	ldd	r25, Y+44	; 0x2c
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_SendCMD+0x150>
    296c:	9c a7       	std	Y+44, r25	; 0x2c
    296e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e8       	ldi	r26, 0x80	; 128
    297e:	bf e3       	ldi	r27, 0x3F	; 63
    2980:	8f a3       	std	Y+39, r24	; 0x27
    2982:	98 a7       	std	Y+40, r25	; 0x28
    2984:	a9 a7       	std	Y+41, r26	; 0x29
    2986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6f a1       	ldd	r22, Y+39	; 0x27
    298a:	78 a5       	ldd	r23, Y+40	; 0x28
    298c:	89 a5       	ldd	r24, Y+41	; 0x29
    298e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a e7       	ldi	r20, 0x7A	; 122
    2996:	55 e4       	ldi	r21, 0x45	; 69
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8b a3       	std	Y+35, r24	; 0x23
    29a2:	9c a3       	std	Y+36, r25	; 0x24
    29a4:	ad a3       	std	Y+37, r26	; 0x25
    29a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a8:	6b a1       	ldd	r22, Y+35	; 0x23
    29aa:	7c a1       	ldd	r23, Y+36	; 0x24
    29ac:	8d a1       	ldd	r24, Y+37	; 0x25
    29ae:	9e a1       	ldd	r25, Y+38	; 0x26
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <LCD_SendCMD+0x1b2>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9a a3       	std	Y+34, r25	; 0x22
    29c6:	89 a3       	std	Y+33, r24	; 0x21
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <LCD_SendCMD+0x230>
	else if (__tmp > 65535)
    29ca:	6b a1       	ldd	r22, Y+35	; 0x23
    29cc:	7c a1       	ldd	r23, Y+36	; 0x24
    29ce:	8d a1       	ldd	r24, Y+37	; 0x25
    29d0:	9e a1       	ldd	r25, Y+38	; 0x26
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <LCD_SendCMD+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6f a1       	ldd	r22, Y+39	; 0x27
    29e4:	78 a5       	ldd	r23, Y+40	; 0x28
    29e6:	89 a5       	ldd	r24, Y+41	; 0x29
    29e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9a a3       	std	Y+34, r25	; 0x22
    2a08:	89 a3       	std	Y+33, r24	; 0x21
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <LCD_SendCMD+0x212>
    2a0c:	80 e9       	ldi	r24, 0x90	; 144
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	98 a3       	std	Y+32, r25	; 0x20
    2a12:	8f 8f       	std	Y+31, r24	; 0x1f
    2a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a16:	98 a1       	ldd	r25, Y+32	; 0x20
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <LCD_SendCMD+0x200>
    2a1c:	98 a3       	std	Y+32, r25	; 0x20
    2a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	89 a1       	ldd	r24, Y+33	; 0x21
    2a22:	9a a1       	ldd	r25, Y+34	; 0x22
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9a a3       	std	Y+34, r25	; 0x22
    2a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <LCD_SendCMD+0x1f4>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <LCD_SendCMD+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6b a1       	ldd	r22, Y+35	; 0x23
    2a36:	7c a1       	ldd	r23, Y+36	; 0x24
    2a38:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9a a3       	std	Y+34, r25	; 0x22
    2a46:	89 a3       	std	Y+33, r24	; 0x21
    2a48:	89 a1       	ldd	r24, Y+33	; 0x21
    2a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_SendCMD+0x23c>
    2a58:	9e 8f       	std	Y+30, r25	; 0x1e
    2a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    // Send the lower 4 bits of the command
    Dio_WriteChannel(D4, GET_BIT(command, 0));
    2a5c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5e:	98 2f       	mov	r25, r24
    2a60:	91 70       	andi	r25, 0x01	; 1
    2a62:	88 e0       	ldi	r24, 0x08	; 8
    2a64:	69 2f       	mov	r22, r25
    2a66:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D5, GET_BIT(command, 1));
    2a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a6c:	86 95       	lsr	r24
    2a6e:	98 2f       	mov	r25, r24
    2a70:	91 70       	andi	r25, 0x01	; 1
    2a72:	89 e0       	ldi	r24, 0x09	; 9
    2a74:	69 2f       	mov	r22, r25
    2a76:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D6, GET_BIT(command, 2));
    2a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a7c:	86 95       	lsr	r24
    2a7e:	86 95       	lsr	r24
    2a80:	98 2f       	mov	r25, r24
    2a82:	91 70       	andi	r25, 0x01	; 1
    2a84:	8a e0       	ldi	r24, 0x0A	; 10
    2a86:	69 2f       	mov	r22, r25
    2a88:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    Dio_WriteChannel(D7, GET_BIT(command, 3));
    2a8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a8e:	86 95       	lsr	r24
    2a90:	86 95       	lsr	r24
    2a92:	86 95       	lsr	r24
    2a94:	98 2f       	mov	r25, r24
    2a96:	91 70       	andi	r25, 0x01	; 1
    2a98:	8c e0       	ldi	r24, 0x0C	; 12
    2a9a:	69 2f       	mov	r22, r25
    2a9c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

    Dio_WriteChannel(EN, STD_HIGH);
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e8       	ldi	r26, 0x80	; 128
    2aae:	bf e3       	ldi	r27, 0x3F	; 63
    2ab0:	89 8f       	std	Y+25, r24	; 0x19
    2ab2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a e7       	ldi	r20, 0x7A	; 122
    2ac6:	55 e4       	ldi	r21, 0x45	; 69
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	8d 8b       	std	Y+21, r24	; 0x15
    2ad2:	9e 8b       	std	Y+22, r25	; 0x16
    2ad4:	af 8b       	std	Y+23, r26	; 0x17
    2ad6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <LCD_SendCMD+0x2e2>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9c 8b       	std	Y+20, r25	; 0x14
    2af6:	8b 8b       	std	Y+19, r24	; 0x13
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <LCD_SendCMD+0x360>
	else if (__tmp > 65535)
    2afa:	6d 89       	ldd	r22, Y+21	; 0x15
    2afc:	7e 89       	ldd	r23, Y+22	; 0x16
    2afe:	8f 89       	ldd	r24, Y+23	; 0x17
    2b00:	98 8d       	ldd	r25, Y+24	; 0x18
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <LCD_SendCMD+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	69 8d       	ldd	r22, Y+25	; 0x19
    2b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <LCD_SendCMD+0x342>
    2b3c:	80 e9       	ldi	r24, 0x90	; 144
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	9a 8b       	std	Y+18, r25	; 0x12
    2b42:	89 8b       	std	Y+17, r24	; 0x11
    2b44:	89 89       	ldd	r24, Y+17	; 0x11
    2b46:	9a 89       	ldd	r25, Y+18	; 0x12
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_SendCMD+0x330>
    2b4c:	9a 8b       	std	Y+18, r25	; 0x12
    2b4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	9c 8b       	std	Y+20, r25	; 0x14
    2b58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <LCD_SendCMD+0x324>
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <LCD_SendCMD+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	6d 89       	ldd	r22, Y+21	; 0x15
    2b66:	7e 89       	ldd	r23, Y+22	; 0x16
    2b68:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	98 8b       	std	Y+16, r25	; 0x10
    2b7e:	8f 87       	std	Y+15, r24	; 0x0f
    2b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b82:	98 89       	ldd	r25, Y+16	; 0x10
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <LCD_SendCMD+0x36c>
    2b88:	98 8b       	std	Y+16, r25	; 0x10
    2b8a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    Dio_WriteChannel(EN, STD_LOW);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e8       	ldi	r26, 0x80	; 128
    2b9a:	bf e3       	ldi	r27, 0x3F	; 63
    2b9c:	8b 87       	std	Y+11, r24	; 0x0b
    2b9e:	9c 87       	std	Y+12, r25	; 0x0c
    2ba0:	ad 87       	std	Y+13, r26	; 0x0d
    2ba2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	55 e4       	ldi	r21, 0x45	; 69
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8f 83       	std	Y+7, r24	; 0x07
    2bbe:	98 87       	std	Y+8, r25	; 0x08
    2bc0:	a9 87       	std	Y+9, r26	; 0x09
    2bc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc6:	78 85       	ldd	r23, Y+8	; 0x08
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <LCD_SendCMD+0x3ce>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <LCD_SendCMD+0x44c>
	else if (__tmp > 65535)
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <LCD_SendCMD+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <LCD_SendCMD+0x42e>
    2c28:	80 e9       	ldi	r24, 0x90	; 144
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_SendCMD+0x41c>
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <LCD_SendCMD+0x410>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <LCD_SendCMD+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	6f 81       	ldd	r22, Y+7	; 0x07
    2c52:	78 85       	ldd	r23, Y+8	; 0x08
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <LCD_SendCMD+0x458>
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    2c78:	e9 96       	adiw	r28, 0x39	; 57
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <LCD_Init>:

// Initializes the LCD module by setting various display and cursor settings
void LCD_Init(void) {
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	c6 54       	subi	r28, 0x46	; 70
    2c98:	d0 40       	sbci	r29, 0x00	; 0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ed 5b       	subi	r30, 0xBD	; 189
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a8 e4       	ldi	r26, 0x48	; 72
    2cb0:	b2 e4       	ldi	r27, 0x42	; 66
    2cb2:	80 83       	st	Z, r24
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	a2 83       	std	Z+2, r26	; 0x02
    2cb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	8e 01       	movw	r16, r28
    2cbc:	01 5c       	subi	r16, 0xC1	; 193
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ed 5b       	subi	r30, 0xBD	; 189
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	55 e4       	ldi	r21, 0x45	; 69
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	f8 01       	movw	r30, r16
    2ce0:	80 83       	st	Z, r24
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	a2 83       	std	Z+2, r26	; 0x02
    2ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ff 96       	adiw	r30, 0x3f	; 63
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	2c f4       	brge	.+10     	; 0x2d0e <LCD_Init+0x84>
		__ticks = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9e af       	std	Y+62, r25	; 0x3e
    2d0a:	8d af       	std	Y+61, r24	; 0x3d
    2d0c:	46 c0       	rjmp	.+140    	; 0x2d9a <LCD_Init+0x110>
	else if (__tmp > 65535)
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ff 96       	adiw	r30, 0x3f	; 63
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	64 f5       	brge	.+88     	; 0x2d82 <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ed 5b       	subi	r30, 0xBD	; 189
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e af       	std	Y+62, r25	; 0x3e
    2d56:	8d af       	std	Y+61, r24	; 0x3d
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <LCD_Init+0xee>
    2d5a:	80 e9       	ldi	r24, 0x90	; 144
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9c af       	std	Y+60, r25	; 0x3c
    2d60:	8b af       	std	Y+59, r24	; 0x3b
    2d62:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d64:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LCD_Init+0xdc>
    2d6a:	9c af       	std	Y+60, r25	; 0x3c
    2d6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9e af       	std	Y+62, r25	; 0x3e
    2d76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <LCD_Init+0xd0>
    2d80:	16 c0       	rjmp	.+44     	; 0x2dae <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	fe 01       	movw	r30, r28
    2d84:	ff 96       	adiw	r30, 0x3f	; 63
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e af       	std	Y+62, r25	; 0x3e
    2d98:	8d af       	std	Y+61, r24	; 0x3d
    2d9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9e:	9a af       	std	Y+58, r25	; 0x3a
    2da0:	89 af       	std	Y+57, r24	; 0x39
    2da2:	89 ad       	ldd	r24, Y+57	; 0x39
    2da4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_Init+0x11c>
    2daa:	9a af       	std	Y+58, r25	; 0x3a
    2dac:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(50);  // Wait for the LCD to power up

    // Setting the display mode and cursor settings
    LCD_SendCMD(LCD_CURSOR_HOME);
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    LCD_SendCMD(LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    2db4:	88 e2       	ldi	r24, 0x28	; 40
    2db6:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 e8       	ldi	r26, 0x80	; 128
    2dc0:	bf e3       	ldi	r27, 0x3F	; 63
    2dc2:	8d ab       	std	Y+53, r24	; 0x35
    2dc4:	9e ab       	std	Y+54, r25	; 0x36
    2dc6:	af ab       	std	Y+55, r26	; 0x37
    2dc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6d a9       	ldd	r22, Y+53	; 0x35
    2dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2dce:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a e7       	ldi	r20, 0x7A	; 122
    2dd8:	55 e4       	ldi	r21, 0x45	; 69
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	89 ab       	std	Y+49, r24	; 0x31
    2de4:	9a ab       	std	Y+50, r25	; 0x32
    2de6:	ab ab       	std	Y+51, r26	; 0x33
    2de8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dea:	69 a9       	ldd	r22, Y+49	; 0x31
    2dec:	7a a9       	ldd	r23, Y+50	; 0x32
    2dee:	8b a9       	ldd	r24, Y+51	; 0x33
    2df0:	9c a9       	ldd	r25, Y+52	; 0x34
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <LCD_Init+0x182>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	98 ab       	std	Y+48, r25	; 0x30
    2e08:	8f a7       	std	Y+47, r24	; 0x2f
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <LCD_Init+0x200>
	else if (__tmp > 65535)
    2e0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e10:	8b a9       	ldd	r24, Y+51	; 0x33
    2e12:	9c a9       	ldd	r25, Y+52	; 0x34
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <LCD_Init+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6d a9       	ldd	r22, Y+53	; 0x35
    2e26:	7e a9       	ldd	r23, Y+54	; 0x36
    2e28:	8f a9       	ldd	r24, Y+55	; 0x37
    2e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <LCD_Init+0x1e2>
    2e4e:	80 e9       	ldi	r24, 0x90	; 144
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	9e a7       	std	Y+46, r25	; 0x2e
    2e54:	8d a7       	std	Y+45, r24	; 0x2d
    2e56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <LCD_Init+0x1d0>
    2e5e:	9e a7       	std	Y+46, r25	; 0x2e
    2e60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e64:	98 a9       	ldd	r25, Y+48	; 0x30
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <LCD_Init+0x1c4>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <LCD_Init+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	69 a9       	ldd	r22, Y+49	; 0x31
    2e78:	7a a9       	ldd	r23, Y+50	; 0x32
    2e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	8f a7       	std	Y+47, r24	; 0x2f
    2e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8e:	9c a7       	std	Y+44, r25	; 0x2c
    2e90:	8b a7       	std	Y+43, r24	; 0x2b
    2e92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <LCD_Init+0x20c>
    2e9a:	9c a7       	std	Y+44, r25	; 0x2c
    2e9c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_ON_BLOCK_CURSOR_ON);
    2e9e:	8f e0       	ldi	r24, 0x0F	; 15
    2ea0:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	a0 e8       	ldi	r26, 0x80	; 128
    2eaa:	bf e3       	ldi	r27, 0x3F	; 63
    2eac:	8f a3       	std	Y+39, r24	; 0x27
    2eae:	98 a7       	std	Y+40, r25	; 0x28
    2eb0:	a9 a7       	std	Y+41, r26	; 0x29
    2eb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	4a e7       	ldi	r20, 0x7A	; 122
    2ec2:	55 e4       	ldi	r21, 0x45	; 69
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8b a3       	std	Y+35, r24	; 0x23
    2ece:	9c a3       	std	Y+36, r25	; 0x24
    2ed0:	ad a3       	std	Y+37, r26	; 0x25
    2ed2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ed4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eda:	9e a1       	ldd	r25, Y+38	; 0x26
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f e3       	ldi	r21, 0x3F	; 63
    2ee4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ee8:	88 23       	and	r24, r24
    2eea:	2c f4       	brge	.+10     	; 0x2ef6 <LCD_Init+0x26c>
		__ticks = 1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9a a3       	std	Y+34, r25	; 0x22
    2ef2:	89 a3       	std	Y+33, r24	; 0x21
    2ef4:	3f c0       	rjmp	.+126    	; 0x2f74 <LCD_Init+0x2ea>
	else if (__tmp > 65535)
    2ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    2efa:	8d a1       	ldd	r24, Y+37	; 0x25
    2efc:	9e a1       	ldd	r25, Y+38	; 0x26
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	3f ef       	ldi	r19, 0xFF	; 255
    2f02:	4f e7       	ldi	r20, 0x7F	; 127
    2f04:	57 e4       	ldi	r21, 0x47	; 71
    2f06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f0a:	18 16       	cp	r1, r24
    2f0c:	4c f5       	brge	.+82     	; 0x2f60 <LCD_Init+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f10:	78 a5       	ldd	r23, Y+40	; 0x28
    2f12:	89 a5       	ldd	r24, Y+41	; 0x29
    2f14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e2       	ldi	r20, 0x20	; 32
    2f1c:	51 e4       	ldi	r21, 0x41	; 65
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9a a3       	std	Y+34, r25	; 0x22
    2f34:	89 a3       	std	Y+33, r24	; 0x21
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <LCD_Init+0x2cc>
    2f38:	80 e9       	ldi	r24, 0x90	; 144
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	98 a3       	std	Y+32, r25	; 0x20
    2f3e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f42:	98 a1       	ldd	r25, Y+32	; 0x20
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_Init+0x2ba>
    2f48:	98 a3       	std	Y+32, r25	; 0x20
    2f4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	9a a3       	std	Y+34, r25	; 0x22
    2f54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f56:	89 a1       	ldd	r24, Y+33	; 0x21
    2f58:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	69 f7       	brne	.-38     	; 0x2f38 <LCD_Init+0x2ae>
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <LCD_Init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f60:	6b a1       	ldd	r22, Y+35	; 0x23
    2f62:	7c a1       	ldd	r23, Y+36	; 0x24
    2f64:	8d a1       	ldd	r24, Y+37	; 0x25
    2f66:	9e a1       	ldd	r25, Y+38	; 0x26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9a a3       	std	Y+34, r25	; 0x22
    2f72:	89 a3       	std	Y+33, r24	; 0x21
    2f74:	89 a1       	ldd	r24, Y+33	; 0x21
    2f76:	9a a1       	ldd	r25, Y+34	; 0x22
    2f78:	9e 8f       	std	Y+30, r25	; 0x1e
    2f7a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	f1 f7       	brne	.-4      	; 0x2f80 <LCD_Init+0x2f6>
    2f84:	9e 8f       	std	Y+30, r25	; 0x1e
    2f86:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);

    LCD_SendCMD(LCD_CLEAR_COMMAND);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e0       	ldi	r26, 0x00	; 0
    2f94:	b0 e4       	ldi	r27, 0x40	; 64
    2f96:	89 8f       	std	Y+25, r24	; 0x19
    2f98:	9a 8f       	std	Y+26, r25	; 0x1a
    2f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	4a e7       	ldi	r20, 0x7A	; 122
    2fac:	55 e4       	ldi	r21, 0x45	; 69
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8d 8b       	std	Y+21, r24	; 0x15
    2fb8:	9e 8b       	std	Y+22, r25	; 0x16
    2fba:	af 8b       	std	Y+23, r26	; 0x17
    2fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <LCD_Init+0x356>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9c 8b       	std	Y+20, r25	; 0x14
    2fdc:	8b 8b       	std	Y+19, r24	; 0x13
    2fde:	3f c0       	rjmp	.+126    	; 0x305e <LCD_Init+0x3d4>
	else if (__tmp > 65535)
    2fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	4c f5       	brge	.+82     	; 0x304a <LCD_Init+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9c 8b       	std	Y+20, r25	; 0x14
    301e:	8b 8b       	std	Y+19, r24	; 0x13
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <LCD_Init+0x3b6>
    3022:	80 e9       	ldi	r24, 0x90	; 144
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	9a 8b       	std	Y+18, r25	; 0x12
    3028:	89 8b       	std	Y+17, r24	; 0x11
    302a:	89 89       	ldd	r24, Y+17	; 0x11
    302c:	9a 89       	ldd	r25, Y+18	; 0x12
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_Init+0x3a4>
    3032:	9a 8b       	std	Y+18, r25	; 0x12
    3034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	8b 89       	ldd	r24, Y+19	; 0x13
    3038:	9c 89       	ldd	r25, Y+20	; 0x14
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	9c 8b       	std	Y+20, r25	; 0x14
    303e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	8b 89       	ldd	r24, Y+19	; 0x13
    3042:	9c 89       	ldd	r25, Y+20	; 0x14
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <LCD_Init+0x398>
    3048:	14 c0       	rjmp	.+40     	; 0x3072 <LCD_Init+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	6d 89       	ldd	r22, Y+21	; 0x15
    304c:	7e 89       	ldd	r23, Y+22	; 0x16
    304e:	8f 89       	ldd	r24, Y+23	; 0x17
    3050:	98 8d       	ldd	r25, Y+24	; 0x18
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	98 8b       	std	Y+16, r25	; 0x10
    3064:	8f 87       	std	Y+15, r24	; 0x0f
    3066:	8f 85       	ldd	r24, Y+15	; 0x0f
    3068:	98 89       	ldd	r25, Y+16	; 0x10
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_Init+0x3e0>
    306e:	98 8b       	std	Y+16, r25	; 0x10
    3070:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);

    LCD_SendCMD(LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3072:	86 e0       	ldi	r24, 0x06	; 6
    3074:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 e8       	ldi	r26, 0x80	; 128
    307e:	bf e3       	ldi	r27, 0x3F	; 63
    3080:	8b 87       	std	Y+11, r24	; 0x0b
    3082:	9c 87       	std	Y+12, r25	; 0x0c
    3084:	ad 87       	std	Y+13, r26	; 0x0d
    3086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6b 85       	ldd	r22, Y+11	; 0x0b
    308a:	7c 85       	ldd	r23, Y+12	; 0x0c
    308c:	8d 85       	ldd	r24, Y+13	; 0x0d
    308e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a e7       	ldi	r20, 0x7A	; 122
    3096:	55 e4       	ldi	r21, 0x45	; 69
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8f 83       	std	Y+7, r24	; 0x07
    30a2:	98 87       	std	Y+8, r25	; 0x08
    30a4:	a9 87       	std	Y+9, r26	; 0x09
    30a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <LCD_Init+0x440>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <LCD_Init+0x4be>
	else if (__tmp > 65535)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <LCD_Init+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
    310a:	0f c0       	rjmp	.+30     	; 0x312a <LCD_Init+0x4a0>
    310c:	80 e9       	ldi	r24, 0x90	; 144
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <LCD_Init+0x48e>
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <LCD_Init+0x482>
    3132:	14 c0       	rjmp	.+40     	; 0x315c <LCD_Init+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	6f 81       	ldd	r22, Y+7	; 0x07
    3136:	78 85       	ldd	r23, Y+8	; 0x08
    3138:	89 85       	ldd	r24, Y+9	; 0x09
    313a:	9a 85       	ldd	r25, Y+10	; 0x0a
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <LCD_Init+0x4ca>
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

    LCD_SendCMD(LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    315c:	8c e0       	ldi	r24, 0x0C	; 12
    315e:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>

//    LCD_SendCMD(LCD_DDRAM_START);  // Set the cursor to the start of the Display Data RAM (DDRAM)
}
    3162:	ca 5b       	subi	r28, 0xBA	; 186
    3164:	df 4f       	sbci	r29, 0xFF	; 255
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <LCD_CLR>:

// Clears the LCD display
void LCD_CLR(void) {
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCMD(0x01);
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    current_pos = 0;
    3188:	10 92 21 02 	sts	0x0221, r1
}
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <LCD_PutChar>:

// Displays a character on the LCD
void LCD_PutChar(const u8 character) {
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	0f 92       	push	r0
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(character);
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_SendData>
    current_pos++;
    31a4:	80 91 21 02 	lds	r24, 0x0221
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	80 93 21 02 	sts	0x0221, r24
}
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <LCD_PutString>:

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <LCD_PutString+0x6>
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	0a c0       	rjmp	.+20     	; 0x31da <LCD_PutString+0x24>
    while (*str) {
        LCD_PutChar(*str);
    31c6:	e9 81       	ldd	r30, Y+1	; 0x01
    31c8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ca:	80 81       	ld	r24, Z
    31cc:	0e 94 c9 18 	call	0x3192	; 0x3192 <LCD_PutChar>
        str++;
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	01 96       	adiw	r24, 0x01	; 1
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	89 83       	std	Y+1, r24	; 0x01
    current_pos++;
}

// Displays a text string on the LCD
void LCD_PutString(const u8 *str) {
    while (*str) {
    31da:	e9 81       	ldd	r30, Y+1	; 0x01
    31dc:	fa 81       	ldd	r31, Y+2	; 0x02
    31de:	80 81       	ld	r24, Z
    31e0:	88 23       	and	r24, r24
    31e2:	89 f7       	brne	.-30     	; 0x31c6 <LCD_PutString+0x10>
        LCD_PutChar(*str);
        str++;
    }
}
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <LCD_PutChar_at_X_Y>:

// Displays a character at a specific position on the LCD
void LCD_PutChar_at_X_Y(u8 data, u8 row, u8 col) {
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <LCD_PutChar_at_X_Y+0x6>
    31f4:	0f 92       	push	r0
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	6a 83       	std	Y+2, r22	; 0x02
    31fe:	4b 83       	std	Y+3, r20	; 0x03
    LCD_GoTo(row, col);
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	6b 81       	ldd	r22, Y+3	; 0x03
    3204:	0e 94 a2 19 	call	0x3344	; 0x3344 <LCD_GoTo>
    LCD_SendData(data);
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_SendData>
}
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <LCD_PutString_at_X_Y>:

// Displays a string at a specific position on the LCD
void LCD_PutString_at_X_Y(u8 *data, u8 row, u8 col) {
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	00 d0       	rcall	.+0      	; 0x3220 <LCD_PutString_at_X_Y+0x6>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <LCD_PutString_at_X_Y+0x8>
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
    322a:	6b 83       	std	Y+3, r22	; 0x03
    322c:	4c 83       	std	Y+4, r20	; 0x04
    LCD_GoTo(row, col);
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	6c 81       	ldd	r22, Y+4	; 0x04
    3232:	0e 94 a2 19 	call	0x3344	; 0x3344 <LCD_GoTo>
    LCD_PutString(data);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_PutString>
}
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <LCD_PutInt>:

// Displays an integer value on the LCD
void LCD_PutInt(u32 Number) {
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	00 d0       	rcall	.+0      	; 0x3252 <LCD_PutInt+0x6>
    3252:	00 d0       	rcall	.+0      	; 0x3254 <LCD_PutInt+0x8>
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	69 83       	std	Y+1, r22	; 0x01
    325a:	7a 83       	std	Y+2, r23	; 0x02
    325c:	8b 83       	std	Y+3, r24	; 0x03
    325e:	9c 83       	std	Y+4, r25	; 0x04
	if(Number == 0 )
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	ab 81       	ldd	r26, Y+3	; 0x03
    3266:	bc 81       	ldd	r27, Y+4	; 0x04
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	a1 05       	cpc	r26, r1
    326c:	b1 05       	cpc	r27, r1
    326e:	19 f1       	breq	.+70     	; 0x32b6 <LCD_PutInt+0x6a>
	return ;
	else
	LCD_PutInt(Number/10);
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	9a 81       	ldd	r25, Y+2	; 0x02
    3274:	ab 81       	ldd	r26, Y+3	; 0x03
    3276:	bc 81       	ldd	r27, Y+4	; 0x04
    3278:	2a e0       	ldi	r18, 0x0A	; 10
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__udivmodsi4>
    3288:	da 01       	movw	r26, r20
    328a:	c9 01       	movw	r24, r18
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	0e 94 26 19 	call	0x324c	; 0x324c <LCD_PutInt>
	LCD_PutChar((Number%10)+0x30);
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	ab 81       	ldd	r26, Y+3	; 0x03
    329a:	bc 81       	ldd	r27, Y+4	; 0x04
    329c:	2a e0       	ldi	r18, 0x0A	; 10
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__udivmodsi4>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	80 5d       	subi	r24, 0xD0	; 208
    32b2:	0e 94 c9 18 	call	0x3192	; 0x3192 <LCD_PutChar>
}
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <LCD_PutCustomChar>:

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	27 97       	sbiw	r28, 0x07	; 7
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	8b 83       	std	Y+3, r24	; 0x03
    32da:	6c 83       	std	Y+4, r22	; 0x04
    32dc:	5e 83       	std	Y+6, r21	; 0x06
    32de:	4d 83       	std	Y+5, r20	; 0x05
    32e0:	2f 83       	std	Y+7, r18	; 0x07
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    32e2:	8f 81       	ldd	r24, Y+7	; 0x07
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	08 96       	adiw	r24, 0x08	; 8
    32ea:	88 0f       	add	r24, r24
    32ec:	99 1f       	adc	r25, r25
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    for (int i = 0; i < 8; i++) {
    32fa:	1a 82       	std	Y+2, r1	; 0x02
    32fc:	19 82       	std	Y+1, r1	; 0x01
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <LCD_PutCustomChar+0x5a>
        LCD_SendData(CustomCharacter[i]);
    3300:	29 81       	ldd	r18, Y+1	; 0x01
    3302:	3a 81       	ldd	r19, Y+2	; 0x02
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	9e 81       	ldd	r25, Y+6	; 0x06
    3308:	fc 01       	movw	r30, r24
    330a:	e2 0f       	add	r30, r18
    330c:	f3 1f       	adc	r31, r19
    330e:	80 81       	ld	r24, Z
    3310:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <LCD_SendData>
}

// Displays a custom character at a specific row and column on the LCD
void LCD_PutCustomChar(u8 row, u8 col, u8 *CustomCharacter, u8 MemPos) {
    LCD_SendCMD(LCD_CGRAM_START + (MemPos * 8));
    for (int i = 0; i < 8; i++) {
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	01 96       	adiw	r24, 0x01	; 1
    331a:	9a 83       	std	Y+2, r25	; 0x02
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	88 30       	cpi	r24, 0x08	; 8
    3324:	91 05       	cpc	r25, r1
    3326:	64 f3       	brlt	.-40     	; 0x3300 <LCD_PutCustomChar+0x3c>
        LCD_SendData(CustomCharacter[i]);
    }
    LCD_PutChar_at_X_Y(MemPos, row, col);
    3328:	8f 81       	ldd	r24, Y+7	; 0x07
    332a:	6b 81       	ldd	r22, Y+3	; 0x03
    332c:	4c 81       	ldd	r20, Y+4	; 0x04
    332e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_PutChar_at_X_Y>
}
    3332:	27 96       	adiw	r28, 0x07	; 7
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <LCD_GoTo>:

// Moves the cursor to a specified row and column on the LCD
void LCD_GoTo(u8 row, u8 col) {
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	00 d0       	rcall	.+0      	; 0x334a <LCD_GoTo+0x6>
    334a:	00 d0       	rcall	.+0      	; 0x334c <LCD_GoTo+0x8>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	6a 83       	std	Y+2, r22	; 0x02
    col--;
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	81 50       	subi	r24, 0x01	; 1
    3358:	8a 83       	std	Y+2, r24	; 0x02
    switch (row) {
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	3c 83       	std	Y+4, r19	; 0x04
    3362:	2b 83       	std	Y+3, r18	; 0x03
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	82 30       	cpi	r24, 0x02	; 2
    336a:	91 05       	cpc	r25, r1
    336c:	d9 f0       	breq	.+54     	; 0x33a4 <LCD_GoTo+0x60>
    336e:	2b 81       	ldd	r18, Y+3	; 0x03
    3370:	3c 81       	ldd	r19, Y+4	; 0x04
    3372:	23 30       	cpi	r18, 0x03	; 3
    3374:	31 05       	cpc	r19, r1
    3376:	34 f4       	brge	.+12     	; 0x3384 <LCD_GoTo+0x40>
    3378:	8b 81       	ldd	r24, Y+3	; 0x03
    337a:	9c 81       	ldd	r25, Y+4	; 0x04
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	91 05       	cpc	r25, r1
    3380:	61 f0       	breq	.+24     	; 0x339a <LCD_GoTo+0x56>
    3382:	1e c0       	rjmp	.+60     	; 0x33c0 <LCD_GoTo+0x7c>
    3384:	2b 81       	ldd	r18, Y+3	; 0x03
    3386:	3c 81       	ldd	r19, Y+4	; 0x04
    3388:	23 30       	cpi	r18, 0x03	; 3
    338a:	31 05       	cpc	r19, r1
    338c:	81 f0       	breq	.+32     	; 0x33ae <LCD_GoTo+0x6a>
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	9c 81       	ldd	r25, Y+4	; 0x04
    3392:	84 30       	cpi	r24, 0x04	; 4
    3394:	91 05       	cpc	r25, r1
    3396:	81 f0       	breq	.+32     	; 0x33b8 <LCD_GoTo+0x74>
    3398:	13 c0       	rjmp	.+38     	; 0x33c0 <LCD_GoTo+0x7c>
        case ROW1:
            LCD_SendCMD(0x80 + col);
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	80 58       	subi	r24, 0x80	; 128
    339e:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    33a2:	0e c0       	rjmp	.+28     	; 0x33c0 <LCD_GoTo+0x7c>
            break;
        case ROW2://C0
            LCD_SendCMD(0xC0 + col);
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	80 54       	subi	r24, 0x40	; 64
    33a8:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    33ac:	09 c0       	rjmp	.+18     	; 0x33c0 <LCD_GoTo+0x7c>
            break;
        case ROW3:
            LCD_SendCMD(0x94 + col);
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	8c 56       	subi	r24, 0x6C	; 108
    33b2:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
    33b6:	04 c0       	rjmp	.+8      	; 0x33c0 <LCD_GoTo+0x7c>
            break;
        case ROW4://D4
            LCD_SendCMD(0xD4 + col);
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	8c 52       	subi	r24, 0x2C	; 44
    33bc:	0e 94 0c 14 	call	0x2818	; 0x2818 <LCD_SendCMD>
            break;
        default:
            break;
    }
}
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <LCD_PutFloat>:




// Function to display a float value on the LCD
void LCD_PutFloat(float number) {
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	2c 97       	sbiw	r28, 0x0c	; 12
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	69 87       	std	Y+9, r22	; 0x09
    33e4:	7a 87       	std	Y+10, r23	; 0x0a
    33e6:	8b 87       	std	Y+11, r24	; 0x0b
    33e8:	9c 87       	std	Y+12, r25	; 0x0c
    // Display the integer part
    int integerPart = (int)number;
    33ea:	69 85       	ldd	r22, Y+9	; 0x09
    33ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    33ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33f2:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	98 87       	std	Y+8, r25	; 0x08
    33fc:	8f 83       	std	Y+7, r24	; 0x07
    LCD_PutInt(integerPart);
    33fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3400:	98 85       	ldd	r25, Y+8	; 0x08
    3402:	aa 27       	eor	r26, r26
    3404:	97 fd       	sbrc	r25, 7
    3406:	a0 95       	com	r26
    3408:	ba 2f       	mov	r27, r26
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	0e 94 26 19 	call	0x324c	; 0x324c <LCD_PutInt>

    // Display the decimal point
    LCD_PutChar('.');
    3412:	8e e2       	ldi	r24, 0x2E	; 46
    3414:	0e 94 c9 18 	call	0x3192	; 0x3192 <LCD_PutChar>

    // Display the fractional part (up to 2 decimal places)
    float fractionalPart = number - integerPart;
    3418:	8f 81       	ldd	r24, Y+7	; 0x07
    341a:	98 85       	ldd	r25, Y+8	; 0x08
    341c:	aa 27       	eor	r26, r26
    341e:	97 fd       	sbrc	r25, 7
    3420:	a0 95       	com	r26
    3422:	ba 2f       	mov	r27, r26
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    342c:	9b 01       	movw	r18, r22
    342e:	ac 01       	movw	r20, r24
    3430:	69 85       	ldd	r22, Y+9	; 0x09
    3432:	7a 85       	ldd	r23, Y+10	; 0x0a
    3434:	8b 85       	ldd	r24, Y+11	; 0x0b
    3436:	9c 85       	ldd	r25, Y+12	; 0x0c
    3438:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	8b 83       	std	Y+3, r24	; 0x03
    3442:	9c 83       	std	Y+4, r25	; 0x04
    3444:	ad 83       	std	Y+5, r26	; 0x05
    3446:	be 83       	std	Y+6, r27	; 0x06
    fractionalPart *= 100; // Multiply by 100 to get two decimal places
    3448:	6b 81       	ldd	r22, Y+3	; 0x03
    344a:	7c 81       	ldd	r23, Y+4	; 0x04
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	48 ec       	ldi	r20, 0xC8	; 200
    3456:	52 e4       	ldi	r21, 0x42	; 66
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	8b 83       	std	Y+3, r24	; 0x03
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	ad 83       	std	Y+5, r26	; 0x05
    3466:	be 83       	std	Y+6, r27	; 0x06
    int decimalPart = (int)fractionalPart;
    3468:	6b 81       	ldd	r22, Y+3	; 0x03
    346a:	7c 81       	ldd	r23, Y+4	; 0x04
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    LCD_PutInt(decimalPart);
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	aa 27       	eor	r26, r26
    3482:	97 fd       	sbrc	r25, 7
    3484:	a0 95       	com	r26
    3486:	ba 2f       	mov	r27, r26
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	0e 94 26 19 	call	0x324c	; 0x324c <LCD_PutInt>
    if(decimalPart==0)LCD_PutChar('0');
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	9a 81       	ldd	r25, Y+2	; 0x02
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	19 f4       	brne	.+6      	; 0x349e <LCD_PutFloat+0xd0>
    3498:	80 e3       	ldi	r24, 0x30	; 48
    349a:	0e 94 c9 18 	call	0x3192	; 0x3192 <LCD_PutChar>

}
    349e:	2c 96       	adiw	r28, 0x0c	; 12
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <KP_Init>:
														{'#','0','=','+'}};
u8 rows[keypad_rows] = {row1, row2,row3,row4};
u8 columns[keypad_coul] = {col1, col2, col3, col4};

void KP_Init(void)
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(col1, STD_HIGH);
    34b8:	8f e1       	ldi	r24, 0x1F	; 31
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
	Dio_WriteChannel(col2, STD_HIGH);
    34c0:	8e e1       	ldi	r24, 0x1E	; 30
    34c2:	61 e0       	ldi	r22, 0x01	; 1
    34c4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
	Dio_WriteChannel(col3, STD_HIGH);
    34c8:	8c e1       	ldi	r24, 0x1C	; 28
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
	Dio_WriteChannel(col4, STD_HIGH);
    34d0:	8b e1       	ldi	r24, 0x1B	; 27
    34d2:	61 e0       	ldi	r22, 0x01	; 1
    34d4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

}
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <KP_GetKey>:



void KP_GetKey(u8* value) {
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	2c 97       	sbiw	r28, 0x0c	; 12
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	9c 87       	std	Y+12, r25	; 0x0c
    34f4:	8b 87       	std	Y+11, r24	; 0x0b

	u8 rows[keypad_rows] = {row1, row2,row3,row4};
    34f6:	85 e1       	ldi	r24, 0x15	; 21
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	84 e1       	ldi	r24, 0x14	; 20
    34fc:	8a 83       	std	Y+2, r24	; 0x02
    34fe:	83 e1       	ldi	r24, 0x13	; 19
    3500:	8b 83       	std	Y+3, r24	; 0x03
    3502:	82 e1       	ldi	r24, 0x12	; 18
    3504:	8c 83       	std	Y+4, r24	; 0x04
	u8 columns[keypad_coul] = {col1, col2, col3, col4};
    3506:	8f e1       	ldi	r24, 0x1F	; 31
    3508:	8d 83       	std	Y+5, r24	; 0x05
    350a:	8e e1       	ldi	r24, 0x1E	; 30
    350c:	8e 83       	std	Y+6, r24	; 0x06
    350e:	8c e1       	ldi	r24, 0x1C	; 28
    3510:	8f 83       	std	Y+7, r24	; 0x07
    3512:	8b e1       	ldi	r24, 0x1B	; 27
    3514:	88 87       	std	Y+8, r24	; 0x08

	// Loop through rows and columns to scan for a pressed key
	volatile u8 r, c;

    for (c = 0; c < keypad_coul; c++) {
    3516:	1a 86       	std	Y+10, r1	; 0x0a
    3518:	60 c0       	rjmp	.+192    	; 0x35da <KP_GetKey+0xfc>
        Dio_WriteChannel(columns[c], STD_LOW);
    351a:	8a 85       	ldd	r24, Y+10	; 0x0a
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	ce 01       	movw	r24, r28
    3522:	05 96       	adiw	r24, 0x05	; 5
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 81       	ld	r24, Z
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>

        for (r = 0; r < keypad_rows; r++) {
    3532:	19 86       	std	Y+9, r1	; 0x09
    3534:	3f c0       	rjmp	.+126    	; 0x35b4 <KP_GetKey+0xd6>
            if (Dio_ReadChannel(rows[r]) == STD_LOW) {
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	28 2f       	mov	r18, r24
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	ce 01       	movw	r24, r28
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	fc 01       	movw	r30, r24
    3542:	e2 0f       	add	r30, r18
    3544:	f3 1f       	adc	r31, r19
    3546:	80 81       	ld	r24, Z
    3548:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Dio_ReadChannel>
    354c:	88 23       	and	r24, r24
    354e:	79 f5       	brne	.+94     	; 0x35ae <KP_GetKey+0xd0>
                // Debounce the keypress
     //           _delay_ms(10);
                if (Dio_ReadChannel(rows[r]) == STD_LOW) {
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	28 2f       	mov	r18, r24
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	ce 01       	movw	r24, r28
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	fc 01       	movw	r30, r24
    355c:	e2 0f       	add	r30, r18
    355e:	f3 1f       	adc	r31, r19
    3560:	80 81       	ld	r24, Z
    3562:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Dio_ReadChannel>
    3566:	88 23       	and	r24, r24
    3568:	11 f5       	brne	.+68     	; 0x35ae <KP_GetKey+0xd0>
                    *value = Keys[r][c];
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	48 2f       	mov	r20, r24
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	8a 85       	ldd	r24, Y+10	; 0x0a
    3572:	28 2f       	mov	r18, r24
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	ca 01       	movw	r24, r20
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	82 0f       	add	r24, r18
    3582:	93 1f       	adc	r25, r19
    3584:	fc 01       	movw	r30, r24
    3586:	ed 50       	subi	r30, 0x0D	; 13
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	80 81       	ld	r24, Z
    358c:	eb 85       	ldd	r30, Y+11	; 0x0b
    358e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3590:	80 83       	st	Z, r24
                    while (Dio_ReadChannel(rows[r]) == STD_LOW); // Wait for key release
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	ce 01       	movw	r24, r28
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	fc 01       	movw	r30, r24
    359e:	e2 0f       	add	r30, r18
    35a0:	f3 1f       	adc	r31, r19
    35a2:	80 81       	ld	r24, Z
    35a4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Dio_ReadChannel>
    35a8:	88 23       	and	r24, r24
    35aa:	99 f3       	breq	.-26     	; 0x3592 <KP_GetKey+0xb4>
    35ac:	1e c0       	rjmp	.+60     	; 0x35ea <KP_GetKey+0x10c>
	volatile u8 r, c;

    for (c = 0; c < keypad_coul; c++) {
        Dio_WriteChannel(columns[c], STD_LOW);

        for (r = 0; r < keypad_rows; r++) {
    35ae:	89 85       	ldd	r24, Y+9	; 0x09
    35b0:	8f 5f       	subi	r24, 0xFF	; 255
    35b2:	89 87       	std	Y+9, r24	; 0x09
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	84 30       	cpi	r24, 0x04	; 4
    35b8:	08 f4       	brcc	.+2      	; 0x35bc <KP_GetKey+0xde>
    35ba:	bd cf       	rjmp	.-134    	; 0x3536 <KP_GetKey+0x58>
                    return;
                }
            }
        }

        Dio_WriteChannel(columns[c], STD_HIGH); // Reset the column
    35bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	ce 01       	movw	r24, r28
    35c4:	05 96       	adiw	r24, 0x05	; 5
    35c6:	fc 01       	movw	r30, r24
    35c8:	e2 0f       	add	r30, r18
    35ca:	f3 1f       	adc	r31, r19
    35cc:	80 81       	ld	r24, Z
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <Dio_WriteChannel>
	u8 columns[keypad_coul] = {col1, col2, col3, col4};

	// Loop through rows and columns to scan for a pressed key
	volatile u8 r, c;

    for (c = 0; c < keypad_coul; c++) {
    35d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35d6:	8f 5f       	subi	r24, 0xFF	; 255
    35d8:	8a 87       	std	Y+10, r24	; 0x0a
    35da:	8a 85       	ldd	r24, Y+10	; 0x0a
    35dc:	84 30       	cpi	r24, 0x04	; 4
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <KP_GetKey+0x104>
    35e0:	9c cf       	rjmp	.-200    	; 0x351a <KP_GetKey+0x3c>
        }

        Dio_WriteChannel(columns[c], STD_HIGH); // Reset the column
    }

    *value = 'T'; // No key pressed
    35e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    35e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    35e6:	84 e5       	ldi	r24, 0x54	; 84
    35e8:	80 83       	st	Z, r24
}
    35ea:	2c 96       	adiw	r28, 0x0c	; 12
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <main>:
int isOperator(char c);
float applyOperation(float a, float b, char op);


int main()
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	c6 54       	subi	r28, 0x46	; 70
    3606:	d0 40       	sbci	r29, 0x00	; 0
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    // MCU pins configurations
    Port_Init(pin_cfg);
    3612:	88 e8       	ldi	r24, 0x88	; 136
    3614:	91 e0       	ldi	r25, 0x01	; 1
    3616:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <Port_Init>
    LCD_Init();
    361a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <LCD_Init>
    KP_Init();
    361e:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <KP_Init>

    while (1)
    {
        LCD_CLR();
    3622:	0e 94 bd 18 	call	0x317a	; 0x317a <LCD_CLR>
        char expression[50];
//        LCD_GoTo(2, 1);
//        LCD_PutString("Enter expression:");

        // Get the expression from the user
        u8 idx = 0;
    3626:	1b 8a       	std	Y+19, r1	; 0x13
        while (1)
        {
            u8 key;
            KP_GetKey(&key);
    3628:	ce 01       	movw	r24, r28
    362a:	44 96       	adiw	r24, 0x14	; 20
    362c:	0e 94 6f 1a 	call	0x34de	; 0x34de <KP_GetKey>
            if (key == '=')
    3630:	8c 89       	ldd	r24, Y+20	; 0x14
    3632:	8d 33       	cpi	r24, 0x3D	; 61
    3634:	09 f0       	breq	.+2      	; 0x3638 <main+0x3c>
    3636:	94 c0       	rjmp	.+296    	; 0x3760 <main+0x164>
            {
                expression[idx] = '\0';
    3638:	8b 89       	ldd	r24, Y+19	; 0x13
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	ce 01       	movw	r24, r28
    3640:	45 96       	adiw	r24, 0x15	; 21
    3642:	fc 01       	movw	r30, r24
    3644:	e2 0f       	add	r30, r18
    3646:	f3 1f       	adc	r31, r19
    3648:	10 82       	st	Z, r1
                LCD_PutChar(key);
            }
        }

        // Calculate the result
        float result = calculate(expression);
    364a:	ce 01       	movw	r24, r28
    364c:	45 96       	adiw	r24, 0x15	; 21
    364e:	0e 94 c5 1b 	call	0x378a	; 0x378a <calculate>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	8f 87       	std	Y+15, r24	; 0x0f
    3658:	98 8b       	std	Y+16, r25	; 0x10
    365a:	a9 8b       	std	Y+17, r26	; 0x11
    365c:	ba 8b       	std	Y+18, r27	; 0x12

        // Display the result
        LCD_CLR();
    365e:	0e 94 bd 18 	call	0x317a	; 0x317a <LCD_CLR>
        LCD_PutString("Result:");
    3662:	80 e6       	ldi	r24, 0x60	; 96
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_PutString>
    //    LCD_GoTo(1, 0);
        LCD_PutFloat(result);
    366a:	8f 85       	ldd	r24, Y+15	; 0x0f
    366c:	98 89       	ldd	r25, Y+16	; 0x10
    366e:	a9 89       	ldd	r26, Y+17	; 0x11
    3670:	ba 89       	ldd	r27, Y+18	; 0x12
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_PutFloat>
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	aa ef       	ldi	r26, 0xFA	; 250
    3680:	b4 e4       	ldi	r27, 0x44	; 68
    3682:	8b 87       	std	Y+11, r24	; 0x0b
    3684:	9c 87       	std	Y+12, r25	; 0x0c
    3686:	ad 87       	std	Y+13, r26	; 0x0d
    3688:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368a:	6b 85       	ldd	r22, Y+11	; 0x0b
    368c:	7c 85       	ldd	r23, Y+12	; 0x0c
    368e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3690:	9e 85       	ldd	r25, Y+14	; 0x0e
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	4a e7       	ldi	r20, 0x7A	; 122
    3698:	55 e4       	ldi	r21, 0x45	; 69
    369a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	8f 83       	std	Y+7, r24	; 0x07
    36a4:	98 87       	std	Y+8, r25	; 0x08
    36a6:	a9 87       	std	Y+9, r26	; 0x09
    36a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36aa:	6f 81       	ldd	r22, Y+7	; 0x07
    36ac:	78 85       	ldd	r23, Y+8	; 0x08
    36ae:	89 85       	ldd	r24, Y+9	; 0x09
    36b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e8       	ldi	r20, 0x80	; 128
    36b8:	5f e3       	ldi	r21, 0x3F	; 63
    36ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36be:	88 23       	and	r24, r24
    36c0:	2c f4       	brge	.+10     	; 0x36cc <main+0xd0>
		__ticks = 1;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
    36ca:	3f c0       	rjmp	.+126    	; 0x374a <main+0x14e>
	else if (__tmp > 65535)
    36cc:	6f 81       	ldd	r22, Y+7	; 0x07
    36ce:	78 85       	ldd	r23, Y+8	; 0x08
    36d0:	89 85       	ldd	r24, Y+9	; 0x09
    36d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	3f ef       	ldi	r19, 0xFF	; 255
    36d8:	4f e7       	ldi	r20, 0x7F	; 127
    36da:	57 e4       	ldi	r21, 0x47	; 71
    36dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36e0:	18 16       	cp	r1, r24
    36e2:	4c f5       	brge	.+82     	; 0x3736 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e2       	ldi	r20, 0x20	; 32
    36f2:	51 e4       	ldi	r21, 0x41	; 65
    36f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	9e 83       	std	Y+6, r25	; 0x06
    370a:	8d 83       	std	Y+5, r24	; 0x05
    370c:	0f c0       	rjmp	.+30     	; 0x372c <main+0x130>
    370e:	80 e9       	ldi	r24, 0x90	; 144
    3710:	91 e0       	ldi	r25, 0x01	; 1
    3712:	9c 83       	std	Y+4, r25	; 0x04
    3714:	8b 83       	std	Y+3, r24	; 0x03
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <main+0x11e>
    371e:	9c 83       	std	Y+4, r25	; 0x04
    3720:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	00 97       	sbiw	r24, 0x00	; 0
    3732:	69 f7       	brne	.-38     	; 0x370e <main+0x112>
    3734:	76 cf       	rjmp	.-276    	; 0x3622 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3736:	6f 81       	ldd	r22, Y+7	; 0x07
    3738:	78 85       	ldd	r23, Y+8	; 0x08
    373a:	89 85       	ldd	r24, Y+9	; 0x09
    373c:	9a 85       	ldd	r25, Y+10	; 0x0a
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	9a 81       	ldd	r25, Y+2	; 0x02
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	f1 f7       	brne	.-4      	; 0x3756 <main+0x15a>
    375a:	9a 83       	std	Y+2, r25	; 0x02
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	61 cf       	rjmp	.-318    	; 0x3622 <main+0x26>
            if (key == '=')
            {
                expression[idx] = '\0';
                break;
            }
            else if (key != 'T')
    3760:	8c 89       	ldd	r24, Y+20	; 0x14
    3762:	84 35       	cpi	r24, 0x54	; 84
    3764:	09 f4       	brne	.+2      	; 0x3768 <main+0x16c>
    3766:	60 cf       	rjmp	.-320    	; 0x3628 <main+0x2c>
            {
                expression[idx++] = key;
    3768:	8b 89       	ldd	r24, Y+19	; 0x13
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4c 89       	ldd	r20, Y+20	; 0x14
    3770:	ce 01       	movw	r24, r28
    3772:	45 96       	adiw	r24, 0x15	; 21
    3774:	fc 01       	movw	r30, r24
    3776:	e2 0f       	add	r30, r18
    3778:	f3 1f       	adc	r31, r19
    377a:	40 83       	st	Z, r20
    377c:	8b 89       	ldd	r24, Y+19	; 0x13
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	8b 8b       	std	Y+19, r24	; 0x13
                LCD_PutChar(key);
    3782:	8c 89       	ldd	r24, Y+20	; 0x14
    3784:	0e 94 c9 18 	call	0x3192	; 0x3192 <LCD_PutChar>
    3788:	4f cf       	rjmp	.-354    	; 0x3628 <main+0x2c>

0000378a <calculate>:
    return 0;
}

// Function to evaluate the expression and return the result
float calculate(char *expression)
{
    378a:	ef 92       	push	r14
    378c:	ff 92       	push	r15
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	62 97       	sbiw	r28, 0x12	; 18
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	9a 8b       	std	Y+18, r25	; 0x12
    37a8:	89 8b       	std	Y+17, r24	; 0x11
    float result = 0;
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e0       	ldi	r26, 0x00	; 0
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	8d 87       	std	Y+13, r24	; 0x0d
    37b4:	9e 87       	std	Y+14, r25	; 0x0e
    37b6:	af 87       	std	Y+15, r26	; 0x0f
    37b8:	b8 8b       	std	Y+16, r27	; 0x10
    float operand1 = 0;
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	a0 e0       	ldi	r26, 0x00	; 0
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	89 87       	std	Y+9, r24	; 0x09
    37c4:	9a 87       	std	Y+10, r25	; 0x0a
    37c6:	ab 87       	std	Y+11, r26	; 0x0b
    37c8:	bc 87       	std	Y+12, r27	; 0x0c
    float operand2 = 0;
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	a0 e0       	ldi	r26, 0x00	; 0
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	af 83       	std	Y+7, r26	; 0x07
    37d8:	b8 87       	std	Y+8, r27	; 0x08
    char current_operator = '+';
    37da:	8b e2       	ldi	r24, 0x2B	; 43
    37dc:	8c 83       	std	Y+4, r24	; 0x04

    for (int i = 0; expression[i] != '\0'; ++i)
    37de:	1b 82       	std	Y+3, r1	; 0x03
    37e0:	1a 82       	std	Y+2, r1	; 0x02
    37e2:	5c c0       	rjmp	.+184    	; 0x389c <calculate+0x112>
    {
        char current_char = expression[i];
    37e4:	2a 81       	ldd	r18, Y+2	; 0x02
    37e6:	3b 81       	ldd	r19, Y+3	; 0x03
    37e8:	89 89       	ldd	r24, Y+17	; 0x11
    37ea:	9a 89       	ldd	r25, Y+18	; 0x12
    37ec:	fc 01       	movw	r30, r24
    37ee:	e2 0f       	add	r30, r18
    37f0:	f3 1f       	adc	r31, r19
    37f2:	80 81       	ld	r24, Z
    37f4:	89 83       	std	Y+1, r24	; 0x01

        if (isDigit(current_char))
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	0e 94 77 1c 	call	0x38ee	; 0x38ee <isDigit>
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	39 f1       	breq	.+78     	; 0x384e <calculate+0xc4>
        {
            // Build the operand
            operand2 = operand2 * 10 + (current_char - '0');
    3800:	6d 81       	ldd	r22, Y+5	; 0x05
    3802:	7e 81       	ldd	r23, Y+6	; 0x06
    3804:	8f 81       	ldd	r24, Y+7	; 0x07
    3806:	98 85       	ldd	r25, Y+8	; 0x08
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 e2       	ldi	r20, 0x20	; 32
    380e:	51 e4       	ldi	r21, 0x41	; 65
    3810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	7c 01       	movw	r14, r24
    381a:	8d 01       	movw	r16, r26
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	88 2f       	mov	r24, r24
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	c0 97       	sbiw	r24, 0x30	; 48
    3824:	aa 27       	eor	r26, r26
    3826:	97 fd       	sbrc	r25, 7
    3828:	a0 95       	com	r26
    382a:	ba 2f       	mov	r27, r26
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3834:	9b 01       	movw	r18, r22
    3836:	ac 01       	movw	r20, r24
    3838:	c8 01       	movw	r24, r16
    383a:	b7 01       	movw	r22, r14
    383c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	8d 83       	std	Y+5, r24	; 0x05
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	af 83       	std	Y+7, r26	; 0x07
    384a:	b8 87       	std	Y+8, r27	; 0x08
    384c:	22 c0       	rjmp	.+68     	; 0x3892 <calculate+0x108>
        }
        else if (isOperator(current_char))
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	0e 94 93 1c 	call	0x3926	; 0x3926 <isOperator>
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	e9 f0       	breq	.+58     	; 0x3892 <calculate+0x108>
        {
            // Apply the previous operation and store the result
            result = applyOperation(result, operand2, current_operator);
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	af 85       	ldd	r26, Y+15	; 0x0f
    385e:	b8 89       	ldd	r27, Y+16	; 0x10
    3860:	2d 81       	ldd	r18, Y+5	; 0x05
    3862:	3e 81       	ldd	r19, Y+6	; 0x06
    3864:	4f 81       	ldd	r20, Y+7	; 0x07
    3866:	58 85       	ldd	r21, Y+8	; 0x08
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0c 81       	ldd	r16, Y+4	; 0x04
    386e:	0e 94 b5 1c 	call	0x396a	; 0x396a <applyOperation>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	8d 87       	std	Y+13, r24	; 0x0d
    3878:	9e 87       	std	Y+14, r25	; 0x0e
    387a:	af 87       	std	Y+15, r26	; 0x0f
    387c:	b8 8b       	std	Y+16, r27	; 0x10

            // Reset the operand for the next number
            operand2 = 0;
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	a0 e0       	ldi	r26, 0x00	; 0
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	af 83       	std	Y+7, r26	; 0x07
    388c:	b8 87       	std	Y+8, r27	; 0x08

            // Update the current operator
            current_operator = current_char;
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	8c 83       	std	Y+4, r24	; 0x04
    float result = 0;
    float operand1 = 0;
    float operand2 = 0;
    char current_operator = '+';

    for (int i = 0; expression[i] != '\0'; ++i)
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	01 96       	adiw	r24, 0x01	; 1
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
    389c:	2a 81       	ldd	r18, Y+2	; 0x02
    389e:	3b 81       	ldd	r19, Y+3	; 0x03
    38a0:	89 89       	ldd	r24, Y+17	; 0x11
    38a2:	9a 89       	ldd	r25, Y+18	; 0x12
    38a4:	fc 01       	movw	r30, r24
    38a6:	e2 0f       	add	r30, r18
    38a8:	f3 1f       	adc	r31, r19
    38aa:	80 81       	ld	r24, Z
    38ac:	88 23       	and	r24, r24
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <calculate+0x128>
    38b0:	99 cf       	rjmp	.-206    	; 0x37e4 <calculate+0x5a>
            current_operator = current_char;
        }
    }

    // Apply the final operation and return the result
    return applyOperation(result, operand2, current_operator);
    38b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b6:	af 85       	ldd	r26, Y+15	; 0x0f
    38b8:	b8 89       	ldd	r27, Y+16	; 0x10
    38ba:	2d 81       	ldd	r18, Y+5	; 0x05
    38bc:	3e 81       	ldd	r19, Y+6	; 0x06
    38be:	4f 81       	ldd	r20, Y+7	; 0x07
    38c0:	58 85       	ldd	r21, Y+8	; 0x08
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0c 81       	ldd	r16, Y+4	; 0x04
    38c8:	0e 94 b5 1c 	call	0x396a	; 0x396a <applyOperation>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
}
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	62 96       	adiw	r28, 0x12	; 18
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	1f 91       	pop	r17
    38e6:	0f 91       	pop	r16
    38e8:	ff 90       	pop	r15
    38ea:	ef 90       	pop	r14
    38ec:	08 95       	ret

000038ee <isDigit>:

// Function to check if a character is a digit
int isDigit(char c)
{
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <isDigit+0x6>
    38f4:	0f 92       	push	r0
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	89 83       	std	Y+1, r24	; 0x01
    return (c >= '0' && c <= '9');
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	80 33       	cpi	r24, 0x30	; 48
    3900:	40 f0       	brcs	.+16     	; 0x3912 <isDigit+0x24>
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	8a 33       	cpi	r24, 0x3A	; 58
    3906:	28 f4       	brcc	.+10     	; 0x3912 <isDigit+0x24>
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	9b 83       	std	Y+3, r25	; 0x03
    390e:	8a 83       	std	Y+2, r24	; 0x02
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <isDigit+0x28>
    3912:	1b 82       	std	Y+3, r1	; 0x03
    3914:	1a 82       	std	Y+2, r1	; 0x02
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	9b 81       	ldd	r25, Y+3	; 0x03
}
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <isOperator>:

// Function to check if a character is an operator (+, -, *, /)
int isOperator(char c)
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	00 d0       	rcall	.+0      	; 0x392c <isOperator+0x6>
    392c:	0f 92       	push	r0
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	89 83       	std	Y+1, r24	; 0x01
    return (c == '+' || c == '-' || c == '*' || c == '/');
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	8b 32       	cpi	r24, 0x2B	; 43
    3938:	49 f0       	breq	.+18     	; 0x394c <isOperator+0x26>
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	8d 32       	cpi	r24, 0x2D	; 45
    393e:	31 f0       	breq	.+12     	; 0x394c <isOperator+0x26>
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	8a 32       	cpi	r24, 0x2A	; 42
    3944:	19 f0       	breq	.+6      	; 0x394c <isOperator+0x26>
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	8f 32       	cpi	r24, 0x2F	; 47
    394a:	29 f4       	brne	.+10     	; 0x3956 <isOperator+0x30>
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	9b 83       	std	Y+3, r25	; 0x03
    3952:	8a 83       	std	Y+2, r24	; 0x02
    3954:	02 c0       	rjmp	.+4      	; 0x395a <isOperator+0x34>
    3956:	1b 82       	std	Y+3, r1	; 0x03
    3958:	1a 82       	std	Y+2, r1	; 0x02
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <applyOperation>:

// Function to apply the operation
float applyOperation(float a, float b, char op)
{
    396a:	0f 93       	push	r16
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	6d 97       	sbiw	r28, 0x1d	; 29
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	6f 87       	std	Y+15, r22	; 0x0f
    3982:	78 8b       	std	Y+16, r23	; 0x10
    3984:	89 8b       	std	Y+17, r24	; 0x11
    3986:	9a 8b       	std	Y+18, r25	; 0x12
    3988:	2b 8b       	std	Y+19, r18	; 0x13
    398a:	3c 8b       	std	Y+20, r19	; 0x14
    398c:	4d 8b       	std	Y+21, r20	; 0x15
    398e:	5e 8b       	std	Y+22, r21	; 0x16
    3990:	0f 8b       	std	Y+23, r16	; 0x17
    switch (op)
    3992:	8f 89       	ldd	r24, Y+23	; 0x17
    3994:	28 2f       	mov	r18, r24
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	3d 8f       	std	Y+29, r19	; 0x1d
    399a:	2c 8f       	std	Y+28, r18	; 0x1c
    399c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    399e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39a0:	8b 32       	cpi	r24, 0x2B	; 43
    39a2:	91 05       	cpc	r25, r1
    39a4:	b1 f0       	breq	.+44     	; 0x39d2 <applyOperation+0x68>
    39a6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    39a8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    39aa:	ac 32       	cpi	r26, 0x2C	; 44
    39ac:	b1 05       	cpc	r27, r1
    39ae:	34 f4       	brge	.+12     	; 0x39bc <applyOperation+0x52>
    39b0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    39b2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    39b4:	2a 32       	cpi	r18, 0x2A	; 42
    39b6:	31 05       	cpc	r19, r1
    39b8:	71 f1       	breq	.+92     	; 0x3a16 <applyOperation+0xac>
    39ba:	dd c0       	rjmp	.+442    	; 0x3b76 <applyOperation+0x20c>
    39bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39c0:	8d 32       	cpi	r24, 0x2D	; 45
    39c2:	91 05       	cpc	r25, r1
    39c4:	b9 f0       	breq	.+46     	; 0x39f4 <applyOperation+0x8a>
    39c6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    39c8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    39ca:	af 32       	cpi	r26, 0x2F	; 47
    39cc:	b1 05       	cpc	r27, r1
    39ce:	a1 f1       	breq	.+104    	; 0x3a38 <applyOperation+0xce>
    39d0:	d2 c0       	rjmp	.+420    	; 0x3b76 <applyOperation+0x20c>
    {
    case '+':
        return a + b;
    39d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    39d4:	78 89       	ldd	r23, Y+16	; 0x10
    39d6:	89 89       	ldd	r24, Y+17	; 0x11
    39d8:	9a 89       	ldd	r25, Y+18	; 0x12
    39da:	2b 89       	ldd	r18, Y+19	; 0x13
    39dc:	3c 89       	ldd	r19, Y+20	; 0x14
    39de:	4d 89       	ldd	r20, Y+21	; 0x15
    39e0:	5e 89       	ldd	r21, Y+22	; 0x16
    39e2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	88 8f       	std	Y+24, r24	; 0x18
    39ec:	99 8f       	std	Y+25, r25	; 0x19
    39ee:	aa 8f       	std	Y+26, r26	; 0x1a
    39f0:	bb 8f       	std	Y+27, r27	; 0x1b
    39f2:	c9 c0       	rjmp	.+402    	; 0x3b86 <applyOperation+0x21c>
    case '-':
        return a - b;
    39f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    39f6:	78 89       	ldd	r23, Y+16	; 0x10
    39f8:	89 89       	ldd	r24, Y+17	; 0x11
    39fa:	9a 89       	ldd	r25, Y+18	; 0x12
    39fc:	2b 89       	ldd	r18, Y+19	; 0x13
    39fe:	3c 89       	ldd	r19, Y+20	; 0x14
    3a00:	4d 89       	ldd	r20, Y+21	; 0x15
    3a02:	5e 89       	ldd	r21, Y+22	; 0x16
    3a04:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	88 8f       	std	Y+24, r24	; 0x18
    3a0e:	99 8f       	std	Y+25, r25	; 0x19
    3a10:	aa 8f       	std	Y+26, r26	; 0x1a
    3a12:	bb 8f       	std	Y+27, r27	; 0x1b
    3a14:	b8 c0       	rjmp	.+368    	; 0x3b86 <applyOperation+0x21c>
    case '*':
        return a * b;
    3a16:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a18:	78 89       	ldd	r23, Y+16	; 0x10
    3a1a:	89 89       	ldd	r24, Y+17	; 0x11
    3a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a1e:	2b 89       	ldd	r18, Y+19	; 0x13
    3a20:	3c 89       	ldd	r19, Y+20	; 0x14
    3a22:	4d 89       	ldd	r20, Y+21	; 0x15
    3a24:	5e 89       	ldd	r21, Y+22	; 0x16
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	88 8f       	std	Y+24, r24	; 0x18
    3a30:	99 8f       	std	Y+25, r25	; 0x19
    3a32:	aa 8f       	std	Y+26, r26	; 0x1a
    3a34:	bb 8f       	std	Y+27, r27	; 0x1b
    3a36:	a7 c0       	rjmp	.+334    	; 0x3b86 <applyOperation+0x21c>
    case '/':
        if (b == 0)
    3a38:	6b 89       	ldd	r22, Y+19	; 0x13
    3a3a:	7c 89       	ldd	r23, Y+20	; 0x14
    3a3c:	8d 89       	ldd	r24, Y+21	; 0x15
    3a3e:	9e 89       	ldd	r25, Y+22	; 0x16
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <applyOperation+0xe8>
    3a50:	81 c0       	rjmp	.+258    	; 0x3b54 <applyOperation+0x1ea>
        {
            // Handle division by zero
            LCD_CLR();
    3a52:	0e 94 bd 18 	call	0x317a	; 0x317a <LCD_CLR>
            LCD_PutString("Error: Division by zero");
    3a56:	88 e6       	ldi	r24, 0x68	; 104
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_PutString>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	aa ef       	ldi	r26, 0xFA	; 250
    3a64:	b4 e4       	ldi	r27, 0x44	; 68
    3a66:	8b 87       	std	Y+11, r24	; 0x0b
    3a68:	9c 87       	std	Y+12, r25	; 0x0c
    3a6a:	ad 87       	std	Y+13, r26	; 0x0d
    3a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	4a e7       	ldi	r20, 0x7A	; 122
    3a7c:	55 e4       	ldi	r21, 0x45	; 69
    3a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8f 83       	std	Y+7, r24	; 0x07
    3a88:	98 87       	std	Y+8, r25	; 0x08
    3a8a:	a9 87       	std	Y+9, r26	; 0x09
    3a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a90:	78 85       	ldd	r23, Y+8	; 0x08
    3a92:	89 85       	ldd	r24, Y+9	; 0x09
    3a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e8       	ldi	r20, 0x80	; 128
    3a9c:	5f e3       	ldi	r21, 0x3F	; 63
    3a9e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3aa2:	88 23       	and	r24, r24
    3aa4:	2c f4       	brge	.+10     	; 0x3ab0 <applyOperation+0x146>
		__ticks = 1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	9e 83       	std	Y+6, r25	; 0x06
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	3f c0       	rjmp	.+126    	; 0x3b2e <applyOperation+0x1c4>
	else if (__tmp > 65535)
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	3f ef       	ldi	r19, 0xFF	; 255
    3abc:	4f e7       	ldi	r20, 0x7F	; 127
    3abe:	57 e4       	ldi	r21, 0x47	; 71
    3ac0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ac4:	18 16       	cp	r1, r24
    3ac6:	4c f5       	brge	.+82     	; 0x3b1a <applyOperation+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e2       	ldi	r20, 0x20	; 32
    3ad6:	51 e4       	ldi	r21, 0x41	; 65
    3ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	9e 83       	std	Y+6, r25	; 0x06
    3aee:	8d 83       	std	Y+5, r24	; 0x05
    3af0:	0f c0       	rjmp	.+30     	; 0x3b10 <applyOperation+0x1a6>
    3af2:	80 e9       	ldi	r24, 0x90	; 144
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	9c 83       	std	Y+4, r25	; 0x04
    3af8:	8b 83       	std	Y+3, r24	; 0x03
    3afa:	8b 81       	ldd	r24, Y+3	; 0x03
    3afc:	9c 81       	ldd	r25, Y+4	; 0x04
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <applyOperation+0x194>
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b06:	8d 81       	ldd	r24, Y+5	; 0x05
    3b08:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	69 f7       	brne	.-38     	; 0x3af2 <applyOperation+0x188>
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <applyOperation+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
    3b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b30:	9e 81       	ldd	r25, Y+6	; 0x06
    3b32:	9a 83       	std	Y+2, r25	; 0x02
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <applyOperation+0x1d0>
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(2000);
            return 0;
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	a0 e0       	ldi	r26, 0x00	; 0
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	88 8f       	std	Y+24, r24	; 0x18
    3b4c:	99 8f       	std	Y+25, r25	; 0x19
    3b4e:	aa 8f       	std	Y+26, r26	; 0x1a
    3b50:	bb 8f       	std	Y+27, r27	; 0x1b
    3b52:	19 c0       	rjmp	.+50     	; 0x3b86 <applyOperation+0x21c>
        }
        else
            return a / b;
    3b54:	6f 85       	ldd	r22, Y+15	; 0x0f
    3b56:	78 89       	ldd	r23, Y+16	; 0x10
    3b58:	89 89       	ldd	r24, Y+17	; 0x11
    3b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b5c:	2b 89       	ldd	r18, Y+19	; 0x13
    3b5e:	3c 89       	ldd	r19, Y+20	; 0x14
    3b60:	4d 89       	ldd	r20, Y+21	; 0x15
    3b62:	5e 89       	ldd	r21, Y+22	; 0x16
    3b64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	88 8f       	std	Y+24, r24	; 0x18
    3b6e:	99 8f       	std	Y+25, r25	; 0x19
    3b70:	aa 8f       	std	Y+26, r26	; 0x1a
    3b72:	bb 8f       	std	Y+27, r27	; 0x1b
    3b74:	08 c0       	rjmp	.+16     	; 0x3b86 <applyOperation+0x21c>
    default:
        return 0;
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	a0 e0       	ldi	r26, 0x00	; 0
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	88 8f       	std	Y+24, r24	; 0x18
    3b80:	99 8f       	std	Y+25, r25	; 0x19
    3b82:	aa 8f       	std	Y+26, r26	; 0x1a
    3b84:	bb 8f       	std	Y+27, r27	; 0x1b
    3b86:	88 8d       	ldd	r24, Y+24	; 0x18
    3b88:	99 8d       	ldd	r25, Y+25	; 0x19
    3b8a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3b8c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    }
}
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	6d 96       	adiw	r28, 0x1d	; 29
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	0f 91       	pop	r16
    3ba4:	08 95       	ret

00003ba6 <__udivmodhi4>:
    3ba6:	aa 1b       	sub	r26, r26
    3ba8:	bb 1b       	sub	r27, r27
    3baa:	51 e1       	ldi	r21, 0x11	; 17
    3bac:	07 c0       	rjmp	.+14     	; 0x3bbc <__udivmodhi4_ep>

00003bae <__udivmodhi4_loop>:
    3bae:	aa 1f       	adc	r26, r26
    3bb0:	bb 1f       	adc	r27, r27
    3bb2:	a6 17       	cp	r26, r22
    3bb4:	b7 07       	cpc	r27, r23
    3bb6:	10 f0       	brcs	.+4      	; 0x3bbc <__udivmodhi4_ep>
    3bb8:	a6 1b       	sub	r26, r22
    3bba:	b7 0b       	sbc	r27, r23

00003bbc <__udivmodhi4_ep>:
    3bbc:	88 1f       	adc	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	5a 95       	dec	r21
    3bc2:	a9 f7       	brne	.-22     	; 0x3bae <__udivmodhi4_loop>
    3bc4:	80 95       	com	r24
    3bc6:	90 95       	com	r25
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	08 95       	ret

00003bce <__udivmodsi4>:
    3bce:	a1 e2       	ldi	r26, 0x21	; 33
    3bd0:	1a 2e       	mov	r1, r26
    3bd2:	aa 1b       	sub	r26, r26
    3bd4:	bb 1b       	sub	r27, r27
    3bd6:	fd 01       	movw	r30, r26
    3bd8:	0d c0       	rjmp	.+26     	; 0x3bf4 <__udivmodsi4_ep>

00003bda <__udivmodsi4_loop>:
    3bda:	aa 1f       	adc	r26, r26
    3bdc:	bb 1f       	adc	r27, r27
    3bde:	ee 1f       	adc	r30, r30
    3be0:	ff 1f       	adc	r31, r31
    3be2:	a2 17       	cp	r26, r18
    3be4:	b3 07       	cpc	r27, r19
    3be6:	e4 07       	cpc	r30, r20
    3be8:	f5 07       	cpc	r31, r21
    3bea:	20 f0       	brcs	.+8      	; 0x3bf4 <__udivmodsi4_ep>
    3bec:	a2 1b       	sub	r26, r18
    3bee:	b3 0b       	sbc	r27, r19
    3bf0:	e4 0b       	sbc	r30, r20
    3bf2:	f5 0b       	sbc	r31, r21

00003bf4 <__udivmodsi4_ep>:
    3bf4:	66 1f       	adc	r22, r22
    3bf6:	77 1f       	adc	r23, r23
    3bf8:	88 1f       	adc	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	1a 94       	dec	r1
    3bfe:	69 f7       	brne	.-38     	; 0x3bda <__udivmodsi4_loop>
    3c00:	60 95       	com	r22
    3c02:	70 95       	com	r23
    3c04:	80 95       	com	r24
    3c06:	90 95       	com	r25
    3c08:	9b 01       	movw	r18, r22
    3c0a:	ac 01       	movw	r20, r24
    3c0c:	bd 01       	movw	r22, r26
    3c0e:	cf 01       	movw	r24, r30
    3c10:	08 95       	ret

00003c12 <__prologue_saves__>:
    3c12:	2f 92       	push	r2
    3c14:	3f 92       	push	r3
    3c16:	4f 92       	push	r4
    3c18:	5f 92       	push	r5
    3c1a:	6f 92       	push	r6
    3c1c:	7f 92       	push	r7
    3c1e:	8f 92       	push	r8
    3c20:	9f 92       	push	r9
    3c22:	af 92       	push	r10
    3c24:	bf 92       	push	r11
    3c26:	cf 92       	push	r12
    3c28:	df 92       	push	r13
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	ca 1b       	sub	r28, r26
    3c3c:	db 0b       	sbc	r29, r27
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	09 94       	ijmp

00003c4a <__epilogue_restores__>:
    3c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    3c4c:	39 88       	ldd	r3, Y+17	; 0x11
    3c4e:	48 88       	ldd	r4, Y+16	; 0x10
    3c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    3c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    3c60:	df 80       	ldd	r13, Y+7	; 0x07
    3c62:	ee 80       	ldd	r14, Y+6	; 0x06
    3c64:	fd 80       	ldd	r15, Y+5	; 0x05
    3c66:	0c 81       	ldd	r16, Y+4	; 0x04
    3c68:	1b 81       	ldd	r17, Y+3	; 0x03
    3c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    3c6e:	ce 0f       	add	r28, r30
    3c70:	d1 1d       	adc	r29, r1
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	ed 01       	movw	r28, r26
    3c7e:	08 95       	ret

00003c80 <_exit>:
    3c80:	f8 94       	cli

00003c82 <__stop_program>:
    3c82:	ff cf       	rjmp	.-2      	; 0x3c82 <__stop_program>
